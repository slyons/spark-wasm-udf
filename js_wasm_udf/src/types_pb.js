// source: types.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

goog.exportSymbol('proto.co.gaffe.proto.DataType', null, global);
goog.exportSymbol('proto.co.gaffe.proto.DataType.Array', null, global);
goog.exportSymbol('proto.co.gaffe.proto.DataType.Binary', null, global);
goog.exportSymbol('proto.co.gaffe.proto.DataType.Boolean', null, global);
goog.exportSymbol('proto.co.gaffe.proto.DataType.Byte', null, global);
goog.exportSymbol('proto.co.gaffe.proto.DataType.CalendarInterval', null, global);
goog.exportSymbol('proto.co.gaffe.proto.DataType.Char', null, global);
goog.exportSymbol('proto.co.gaffe.proto.DataType.Date', null, global);
goog.exportSymbol('proto.co.gaffe.proto.DataType.DayTimeInterval', null, global);
goog.exportSymbol('proto.co.gaffe.proto.DataType.Decimal', null, global);
goog.exportSymbol('proto.co.gaffe.proto.DataType.Double', null, global);
goog.exportSymbol('proto.co.gaffe.proto.DataType.Float', null, global);
goog.exportSymbol('proto.co.gaffe.proto.DataType.Integer', null, global);
goog.exportSymbol('proto.co.gaffe.proto.DataType.KindCase', null, global);
goog.exportSymbol('proto.co.gaffe.proto.DataType.Long', null, global);
goog.exportSymbol('proto.co.gaffe.proto.DataType.Map', null, global);
goog.exportSymbol('proto.co.gaffe.proto.DataType.NULL', null, global);
goog.exportSymbol('proto.co.gaffe.proto.DataType.Short', null, global);
goog.exportSymbol('proto.co.gaffe.proto.DataType.String', null, global);
goog.exportSymbol('proto.co.gaffe.proto.DataType.Struct', null, global);
goog.exportSymbol('proto.co.gaffe.proto.DataType.StructField', null, global);
goog.exportSymbol('proto.co.gaffe.proto.DataType.Timestamp', null, global);
goog.exportSymbol('proto.co.gaffe.proto.DataType.TimestampNTZ', null, global);
goog.exportSymbol('proto.co.gaffe.proto.DataType.UDT', null, global);
goog.exportSymbol('proto.co.gaffe.proto.DataType.Unparsed', null, global);
goog.exportSymbol('proto.co.gaffe.proto.DataType.VarChar', null, global);
goog.exportSymbol('proto.co.gaffe.proto.DataType.Variant', null, global);
goog.exportSymbol('proto.co.gaffe.proto.DataType.YearMonthInterval', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.co.gaffe.proto.DataType = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.co.gaffe.proto.DataType.oneofGroups_);
};
goog.inherits(proto.co.gaffe.proto.DataType, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.co.gaffe.proto.DataType.displayName = 'proto.co.gaffe.proto.DataType';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.co.gaffe.proto.DataType.Boolean = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.co.gaffe.proto.DataType.Boolean, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.co.gaffe.proto.DataType.Boolean.displayName = 'proto.co.gaffe.proto.DataType.Boolean';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.co.gaffe.proto.DataType.Byte = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.co.gaffe.proto.DataType.Byte, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.co.gaffe.proto.DataType.Byte.displayName = 'proto.co.gaffe.proto.DataType.Byte';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.co.gaffe.proto.DataType.Short = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.co.gaffe.proto.DataType.Short, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.co.gaffe.proto.DataType.Short.displayName = 'proto.co.gaffe.proto.DataType.Short';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.co.gaffe.proto.DataType.Integer = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.co.gaffe.proto.DataType.Integer, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.co.gaffe.proto.DataType.Integer.displayName = 'proto.co.gaffe.proto.DataType.Integer';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.co.gaffe.proto.DataType.Long = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.co.gaffe.proto.DataType.Long, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.co.gaffe.proto.DataType.Long.displayName = 'proto.co.gaffe.proto.DataType.Long';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.co.gaffe.proto.DataType.Float = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.co.gaffe.proto.DataType.Float, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.co.gaffe.proto.DataType.Float.displayName = 'proto.co.gaffe.proto.DataType.Float';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.co.gaffe.proto.DataType.Double = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.co.gaffe.proto.DataType.Double, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.co.gaffe.proto.DataType.Double.displayName = 'proto.co.gaffe.proto.DataType.Double';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.co.gaffe.proto.DataType.String = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.co.gaffe.proto.DataType.String, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.co.gaffe.proto.DataType.String.displayName = 'proto.co.gaffe.proto.DataType.String';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.co.gaffe.proto.DataType.Binary = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.co.gaffe.proto.DataType.Binary, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.co.gaffe.proto.DataType.Binary.displayName = 'proto.co.gaffe.proto.DataType.Binary';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.co.gaffe.proto.DataType.NULL = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.co.gaffe.proto.DataType.NULL, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.co.gaffe.proto.DataType.NULL.displayName = 'proto.co.gaffe.proto.DataType.NULL';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.co.gaffe.proto.DataType.Timestamp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.co.gaffe.proto.DataType.Timestamp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.co.gaffe.proto.DataType.Timestamp.displayName = 'proto.co.gaffe.proto.DataType.Timestamp';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.co.gaffe.proto.DataType.Date = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.co.gaffe.proto.DataType.Date, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.co.gaffe.proto.DataType.Date.displayName = 'proto.co.gaffe.proto.DataType.Date';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.co.gaffe.proto.DataType.TimestampNTZ = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.co.gaffe.proto.DataType.TimestampNTZ, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.co.gaffe.proto.DataType.TimestampNTZ.displayName = 'proto.co.gaffe.proto.DataType.TimestampNTZ';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.co.gaffe.proto.DataType.CalendarInterval = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.co.gaffe.proto.DataType.CalendarInterval, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.co.gaffe.proto.DataType.CalendarInterval.displayName = 'proto.co.gaffe.proto.DataType.CalendarInterval';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.co.gaffe.proto.DataType.YearMonthInterval = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.co.gaffe.proto.DataType.YearMonthInterval, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.co.gaffe.proto.DataType.YearMonthInterval.displayName = 'proto.co.gaffe.proto.DataType.YearMonthInterval';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.co.gaffe.proto.DataType.DayTimeInterval = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.co.gaffe.proto.DataType.DayTimeInterval, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.co.gaffe.proto.DataType.DayTimeInterval.displayName = 'proto.co.gaffe.proto.DataType.DayTimeInterval';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.co.gaffe.proto.DataType.Char = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.co.gaffe.proto.DataType.Char, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.co.gaffe.proto.DataType.Char.displayName = 'proto.co.gaffe.proto.DataType.Char';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.co.gaffe.proto.DataType.VarChar = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.co.gaffe.proto.DataType.VarChar, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.co.gaffe.proto.DataType.VarChar.displayName = 'proto.co.gaffe.proto.DataType.VarChar';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.co.gaffe.proto.DataType.Decimal = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.co.gaffe.proto.DataType.Decimal, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.co.gaffe.proto.DataType.Decimal.displayName = 'proto.co.gaffe.proto.DataType.Decimal';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.co.gaffe.proto.DataType.StructField = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.co.gaffe.proto.DataType.StructField, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.co.gaffe.proto.DataType.StructField.displayName = 'proto.co.gaffe.proto.DataType.StructField';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.co.gaffe.proto.DataType.Struct = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.co.gaffe.proto.DataType.Struct.repeatedFields_, null);
};
goog.inherits(proto.co.gaffe.proto.DataType.Struct, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.co.gaffe.proto.DataType.Struct.displayName = 'proto.co.gaffe.proto.DataType.Struct';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.co.gaffe.proto.DataType.Array = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.co.gaffe.proto.DataType.Array, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.co.gaffe.proto.DataType.Array.displayName = 'proto.co.gaffe.proto.DataType.Array';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.co.gaffe.proto.DataType.Map = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.co.gaffe.proto.DataType.Map, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.co.gaffe.proto.DataType.Map.displayName = 'proto.co.gaffe.proto.DataType.Map';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.co.gaffe.proto.DataType.Variant = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.co.gaffe.proto.DataType.Variant, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.co.gaffe.proto.DataType.Variant.displayName = 'proto.co.gaffe.proto.DataType.Variant';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.co.gaffe.proto.DataType.UDT = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.co.gaffe.proto.DataType.UDT, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.co.gaffe.proto.DataType.UDT.displayName = 'proto.co.gaffe.proto.DataType.UDT';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.co.gaffe.proto.DataType.Unparsed = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.co.gaffe.proto.DataType.Unparsed, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.co.gaffe.proto.DataType.Unparsed.displayName = 'proto.co.gaffe.proto.DataType.Unparsed';
}

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.co.gaffe.proto.DataType.oneofGroups_ = [[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,25,23,24]];

/**
 * @enum {number}
 */
proto.co.gaffe.proto.DataType.KindCase = {
  KIND_NOT_SET: 0,
  NULL: 1,
  BINARY: 2,
  BOOLEAN: 3,
  BYTE: 4,
  SHORT: 5,
  INTEGER: 6,
  LONG: 7,
  FLOAT: 8,
  DOUBLE: 9,
  DECIMAL: 10,
  STRING: 11,
  CHAR: 12,
  VAR_CHAR: 13,
  DATE: 14,
  TIMESTAMP: 15,
  TIMESTAMP_NTZ: 16,
  CALENDAR_INTERVAL: 17,
  YEAR_MONTH_INTERVAL: 18,
  DAY_TIME_INTERVAL: 19,
  ARRAY: 20,
  STRUCT: 21,
  MAP: 22,
  VARIANT: 25,
  UDT: 23,
  UNPARSED: 24
};

/**
 * @return {proto.co.gaffe.proto.DataType.KindCase}
 */
proto.co.gaffe.proto.DataType.prototype.getKindCase = function() {
  return /** @type {proto.co.gaffe.proto.DataType.KindCase} */(jspb.Message.computeOneofCase(this, proto.co.gaffe.proto.DataType.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.co.gaffe.proto.DataType.prototype.toObject = function(opt_includeInstance) {
  return proto.co.gaffe.proto.DataType.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.co.gaffe.proto.DataType} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.co.gaffe.proto.DataType.toObject = function(includeInstance, msg) {
  var f, obj = {
    pb_null: (f = msg.getNull()) && proto.co.gaffe.proto.DataType.NULL.toObject(includeInstance, f),
    binary: (f = msg.getBinary()) && proto.co.gaffe.proto.DataType.Binary.toObject(includeInstance, f),
    pb_boolean: (f = msg.getBoolean()) && proto.co.gaffe.proto.DataType.Boolean.toObject(includeInstance, f),
    pb_byte: (f = msg.getByte()) && proto.co.gaffe.proto.DataType.Byte.toObject(includeInstance, f),
    pb_short: (f = msg.getShort()) && proto.co.gaffe.proto.DataType.Short.toObject(includeInstance, f),
    integer: (f = msg.getInteger()) && proto.co.gaffe.proto.DataType.Integer.toObject(includeInstance, f),
    pb_long: (f = msg.getLong()) && proto.co.gaffe.proto.DataType.Long.toObject(includeInstance, f),
    pb_float: (f = msg.getFloat()) && proto.co.gaffe.proto.DataType.Float.toObject(includeInstance, f),
    pb_double: (f = msg.getDouble()) && proto.co.gaffe.proto.DataType.Double.toObject(includeInstance, f),
    decimal: (f = msg.getDecimal()) && proto.co.gaffe.proto.DataType.Decimal.toObject(includeInstance, f),
    string: (f = msg.getString()) && proto.co.gaffe.proto.DataType.String.toObject(includeInstance, f),
    pb_char: (f = msg.getChar()) && proto.co.gaffe.proto.DataType.Char.toObject(includeInstance, f),
    varChar: (f = msg.getVarChar()) && proto.co.gaffe.proto.DataType.VarChar.toObject(includeInstance, f),
    date: (f = msg.getDate()) && proto.co.gaffe.proto.DataType.Date.toObject(includeInstance, f),
    timestamp: (f = msg.getTimestamp()) && proto.co.gaffe.proto.DataType.Timestamp.toObject(includeInstance, f),
    timestampNtz: (f = msg.getTimestampNtz()) && proto.co.gaffe.proto.DataType.TimestampNTZ.toObject(includeInstance, f),
    calendarInterval: (f = msg.getCalendarInterval()) && proto.co.gaffe.proto.DataType.CalendarInterval.toObject(includeInstance, f),
    yearMonthInterval: (f = msg.getYearMonthInterval()) && proto.co.gaffe.proto.DataType.YearMonthInterval.toObject(includeInstance, f),
    dayTimeInterval: (f = msg.getDayTimeInterval()) && proto.co.gaffe.proto.DataType.DayTimeInterval.toObject(includeInstance, f),
    array: (f = msg.getArray()) && proto.co.gaffe.proto.DataType.Array.toObject(includeInstance, f),
    struct: (f = msg.getStruct()) && proto.co.gaffe.proto.DataType.Struct.toObject(includeInstance, f),
    map: (f = msg.getMap()) && proto.co.gaffe.proto.DataType.Map.toObject(includeInstance, f),
    variant: (f = msg.getVariant()) && proto.co.gaffe.proto.DataType.Variant.toObject(includeInstance, f),
    udt: (f = msg.getUdt()) && proto.co.gaffe.proto.DataType.UDT.toObject(includeInstance, f),
    unparsed: (f = msg.getUnparsed()) && proto.co.gaffe.proto.DataType.Unparsed.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.co.gaffe.proto.DataType}
 */
proto.co.gaffe.proto.DataType.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.co.gaffe.proto.DataType;
  return proto.co.gaffe.proto.DataType.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.co.gaffe.proto.DataType} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.co.gaffe.proto.DataType}
 */
proto.co.gaffe.proto.DataType.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.co.gaffe.proto.DataType.NULL;
      reader.readMessage(value,proto.co.gaffe.proto.DataType.NULL.deserializeBinaryFromReader);
      msg.setNull(value);
      break;
    case 2:
      var value = new proto.co.gaffe.proto.DataType.Binary;
      reader.readMessage(value,proto.co.gaffe.proto.DataType.Binary.deserializeBinaryFromReader);
      msg.setBinary(value);
      break;
    case 3:
      var value = new proto.co.gaffe.proto.DataType.Boolean;
      reader.readMessage(value,proto.co.gaffe.proto.DataType.Boolean.deserializeBinaryFromReader);
      msg.setBoolean(value);
      break;
    case 4:
      var value = new proto.co.gaffe.proto.DataType.Byte;
      reader.readMessage(value,proto.co.gaffe.proto.DataType.Byte.deserializeBinaryFromReader);
      msg.setByte(value);
      break;
    case 5:
      var value = new proto.co.gaffe.proto.DataType.Short;
      reader.readMessage(value,proto.co.gaffe.proto.DataType.Short.deserializeBinaryFromReader);
      msg.setShort(value);
      break;
    case 6:
      var value = new proto.co.gaffe.proto.DataType.Integer;
      reader.readMessage(value,proto.co.gaffe.proto.DataType.Integer.deserializeBinaryFromReader);
      msg.setInteger(value);
      break;
    case 7:
      var value = new proto.co.gaffe.proto.DataType.Long;
      reader.readMessage(value,proto.co.gaffe.proto.DataType.Long.deserializeBinaryFromReader);
      msg.setLong(value);
      break;
    case 8:
      var value = new proto.co.gaffe.proto.DataType.Float;
      reader.readMessage(value,proto.co.gaffe.proto.DataType.Float.deserializeBinaryFromReader);
      msg.setFloat(value);
      break;
    case 9:
      var value = new proto.co.gaffe.proto.DataType.Double;
      reader.readMessage(value,proto.co.gaffe.proto.DataType.Double.deserializeBinaryFromReader);
      msg.setDouble(value);
      break;
    case 10:
      var value = new proto.co.gaffe.proto.DataType.Decimal;
      reader.readMessage(value,proto.co.gaffe.proto.DataType.Decimal.deserializeBinaryFromReader);
      msg.setDecimal(value);
      break;
    case 11:
      var value = new proto.co.gaffe.proto.DataType.String;
      reader.readMessage(value,proto.co.gaffe.proto.DataType.String.deserializeBinaryFromReader);
      msg.setString(value);
      break;
    case 12:
      var value = new proto.co.gaffe.proto.DataType.Char;
      reader.readMessage(value,proto.co.gaffe.proto.DataType.Char.deserializeBinaryFromReader);
      msg.setChar(value);
      break;
    case 13:
      var value = new proto.co.gaffe.proto.DataType.VarChar;
      reader.readMessage(value,proto.co.gaffe.proto.DataType.VarChar.deserializeBinaryFromReader);
      msg.setVarChar(value);
      break;
    case 14:
      var value = new proto.co.gaffe.proto.DataType.Date;
      reader.readMessage(value,proto.co.gaffe.proto.DataType.Date.deserializeBinaryFromReader);
      msg.setDate(value);
      break;
    case 15:
      var value = new proto.co.gaffe.proto.DataType.Timestamp;
      reader.readMessage(value,proto.co.gaffe.proto.DataType.Timestamp.deserializeBinaryFromReader);
      msg.setTimestamp(value);
      break;
    case 16:
      var value = new proto.co.gaffe.proto.DataType.TimestampNTZ;
      reader.readMessage(value,proto.co.gaffe.proto.DataType.TimestampNTZ.deserializeBinaryFromReader);
      msg.setTimestampNtz(value);
      break;
    case 17:
      var value = new proto.co.gaffe.proto.DataType.CalendarInterval;
      reader.readMessage(value,proto.co.gaffe.proto.DataType.CalendarInterval.deserializeBinaryFromReader);
      msg.setCalendarInterval(value);
      break;
    case 18:
      var value = new proto.co.gaffe.proto.DataType.YearMonthInterval;
      reader.readMessage(value,proto.co.gaffe.proto.DataType.YearMonthInterval.deserializeBinaryFromReader);
      msg.setYearMonthInterval(value);
      break;
    case 19:
      var value = new proto.co.gaffe.proto.DataType.DayTimeInterval;
      reader.readMessage(value,proto.co.gaffe.proto.DataType.DayTimeInterval.deserializeBinaryFromReader);
      msg.setDayTimeInterval(value);
      break;
    case 20:
      var value = new proto.co.gaffe.proto.DataType.Array;
      reader.readMessage(value,proto.co.gaffe.proto.DataType.Array.deserializeBinaryFromReader);
      msg.setArray(value);
      break;
    case 21:
      var value = new proto.co.gaffe.proto.DataType.Struct;
      reader.readMessage(value,proto.co.gaffe.proto.DataType.Struct.deserializeBinaryFromReader);
      msg.setStruct(value);
      break;
    case 22:
      var value = new proto.co.gaffe.proto.DataType.Map;
      reader.readMessage(value,proto.co.gaffe.proto.DataType.Map.deserializeBinaryFromReader);
      msg.setMap(value);
      break;
    case 25:
      var value = new proto.co.gaffe.proto.DataType.Variant;
      reader.readMessage(value,proto.co.gaffe.proto.DataType.Variant.deserializeBinaryFromReader);
      msg.setVariant(value);
      break;
    case 23:
      var value = new proto.co.gaffe.proto.DataType.UDT;
      reader.readMessage(value,proto.co.gaffe.proto.DataType.UDT.deserializeBinaryFromReader);
      msg.setUdt(value);
      break;
    case 24:
      var value = new proto.co.gaffe.proto.DataType.Unparsed;
      reader.readMessage(value,proto.co.gaffe.proto.DataType.Unparsed.deserializeBinaryFromReader);
      msg.setUnparsed(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.co.gaffe.proto.DataType.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.co.gaffe.proto.DataType.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.co.gaffe.proto.DataType} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.co.gaffe.proto.DataType.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNull();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.co.gaffe.proto.DataType.NULL.serializeBinaryToWriter
    );
  }
  f = message.getBinary();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.co.gaffe.proto.DataType.Binary.serializeBinaryToWriter
    );
  }
  f = message.getBoolean();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.co.gaffe.proto.DataType.Boolean.serializeBinaryToWriter
    );
  }
  f = message.getByte();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.co.gaffe.proto.DataType.Byte.serializeBinaryToWriter
    );
  }
  f = message.getShort();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.co.gaffe.proto.DataType.Short.serializeBinaryToWriter
    );
  }
  f = message.getInteger();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.co.gaffe.proto.DataType.Integer.serializeBinaryToWriter
    );
  }
  f = message.getLong();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.co.gaffe.proto.DataType.Long.serializeBinaryToWriter
    );
  }
  f = message.getFloat();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.co.gaffe.proto.DataType.Float.serializeBinaryToWriter
    );
  }
  f = message.getDouble();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.co.gaffe.proto.DataType.Double.serializeBinaryToWriter
    );
  }
  f = message.getDecimal();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.co.gaffe.proto.DataType.Decimal.serializeBinaryToWriter
    );
  }
  f = message.getString();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.co.gaffe.proto.DataType.String.serializeBinaryToWriter
    );
  }
  f = message.getChar();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      proto.co.gaffe.proto.DataType.Char.serializeBinaryToWriter
    );
  }
  f = message.getVarChar();
  if (f != null) {
    writer.writeMessage(
      13,
      f,
      proto.co.gaffe.proto.DataType.VarChar.serializeBinaryToWriter
    );
  }
  f = message.getDate();
  if (f != null) {
    writer.writeMessage(
      14,
      f,
      proto.co.gaffe.proto.DataType.Date.serializeBinaryToWriter
    );
  }
  f = message.getTimestamp();
  if (f != null) {
    writer.writeMessage(
      15,
      f,
      proto.co.gaffe.proto.DataType.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getTimestampNtz();
  if (f != null) {
    writer.writeMessage(
      16,
      f,
      proto.co.gaffe.proto.DataType.TimestampNTZ.serializeBinaryToWriter
    );
  }
  f = message.getCalendarInterval();
  if (f != null) {
    writer.writeMessage(
      17,
      f,
      proto.co.gaffe.proto.DataType.CalendarInterval.serializeBinaryToWriter
    );
  }
  f = message.getYearMonthInterval();
  if (f != null) {
    writer.writeMessage(
      18,
      f,
      proto.co.gaffe.proto.DataType.YearMonthInterval.serializeBinaryToWriter
    );
  }
  f = message.getDayTimeInterval();
  if (f != null) {
    writer.writeMessage(
      19,
      f,
      proto.co.gaffe.proto.DataType.DayTimeInterval.serializeBinaryToWriter
    );
  }
  f = message.getArray();
  if (f != null) {
    writer.writeMessage(
      20,
      f,
      proto.co.gaffe.proto.DataType.Array.serializeBinaryToWriter
    );
  }
  f = message.getStruct();
  if (f != null) {
    writer.writeMessage(
      21,
      f,
      proto.co.gaffe.proto.DataType.Struct.serializeBinaryToWriter
    );
  }
  f = message.getMap();
  if (f != null) {
    writer.writeMessage(
      22,
      f,
      proto.co.gaffe.proto.DataType.Map.serializeBinaryToWriter
    );
  }
  f = message.getVariant();
  if (f != null) {
    writer.writeMessage(
      25,
      f,
      proto.co.gaffe.proto.DataType.Variant.serializeBinaryToWriter
    );
  }
  f = message.getUdt();
  if (f != null) {
    writer.writeMessage(
      23,
      f,
      proto.co.gaffe.proto.DataType.UDT.serializeBinaryToWriter
    );
  }
  f = message.getUnparsed();
  if (f != null) {
    writer.writeMessage(
      24,
      f,
      proto.co.gaffe.proto.DataType.Unparsed.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.co.gaffe.proto.DataType.Boolean.prototype.toObject = function(opt_includeInstance) {
  return proto.co.gaffe.proto.DataType.Boolean.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.co.gaffe.proto.DataType.Boolean} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.co.gaffe.proto.DataType.Boolean.toObject = function(includeInstance, msg) {
  var f, obj = {
    typeVariationReference: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.co.gaffe.proto.DataType.Boolean}
 */
proto.co.gaffe.proto.DataType.Boolean.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.co.gaffe.proto.DataType.Boolean;
  return proto.co.gaffe.proto.DataType.Boolean.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.co.gaffe.proto.DataType.Boolean} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.co.gaffe.proto.DataType.Boolean}
 */
proto.co.gaffe.proto.DataType.Boolean.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTypeVariationReference(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.co.gaffe.proto.DataType.Boolean.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.co.gaffe.proto.DataType.Boolean.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.co.gaffe.proto.DataType.Boolean} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.co.gaffe.proto.DataType.Boolean.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTypeVariationReference();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 type_variation_reference = 1;
 * @return {number}
 */
proto.co.gaffe.proto.DataType.Boolean.prototype.getTypeVariationReference = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.co.gaffe.proto.DataType.Boolean} returns this
 */
proto.co.gaffe.proto.DataType.Boolean.prototype.setTypeVariationReference = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.co.gaffe.proto.DataType.Byte.prototype.toObject = function(opt_includeInstance) {
  return proto.co.gaffe.proto.DataType.Byte.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.co.gaffe.proto.DataType.Byte} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.co.gaffe.proto.DataType.Byte.toObject = function(includeInstance, msg) {
  var f, obj = {
    typeVariationReference: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.co.gaffe.proto.DataType.Byte}
 */
proto.co.gaffe.proto.DataType.Byte.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.co.gaffe.proto.DataType.Byte;
  return proto.co.gaffe.proto.DataType.Byte.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.co.gaffe.proto.DataType.Byte} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.co.gaffe.proto.DataType.Byte}
 */
proto.co.gaffe.proto.DataType.Byte.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTypeVariationReference(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.co.gaffe.proto.DataType.Byte.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.co.gaffe.proto.DataType.Byte.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.co.gaffe.proto.DataType.Byte} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.co.gaffe.proto.DataType.Byte.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTypeVariationReference();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 type_variation_reference = 1;
 * @return {number}
 */
proto.co.gaffe.proto.DataType.Byte.prototype.getTypeVariationReference = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.co.gaffe.proto.DataType.Byte} returns this
 */
proto.co.gaffe.proto.DataType.Byte.prototype.setTypeVariationReference = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.co.gaffe.proto.DataType.Short.prototype.toObject = function(opt_includeInstance) {
  return proto.co.gaffe.proto.DataType.Short.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.co.gaffe.proto.DataType.Short} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.co.gaffe.proto.DataType.Short.toObject = function(includeInstance, msg) {
  var f, obj = {
    typeVariationReference: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.co.gaffe.proto.DataType.Short}
 */
proto.co.gaffe.proto.DataType.Short.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.co.gaffe.proto.DataType.Short;
  return proto.co.gaffe.proto.DataType.Short.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.co.gaffe.proto.DataType.Short} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.co.gaffe.proto.DataType.Short}
 */
proto.co.gaffe.proto.DataType.Short.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTypeVariationReference(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.co.gaffe.proto.DataType.Short.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.co.gaffe.proto.DataType.Short.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.co.gaffe.proto.DataType.Short} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.co.gaffe.proto.DataType.Short.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTypeVariationReference();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 type_variation_reference = 1;
 * @return {number}
 */
proto.co.gaffe.proto.DataType.Short.prototype.getTypeVariationReference = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.co.gaffe.proto.DataType.Short} returns this
 */
proto.co.gaffe.proto.DataType.Short.prototype.setTypeVariationReference = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.co.gaffe.proto.DataType.Integer.prototype.toObject = function(opt_includeInstance) {
  return proto.co.gaffe.proto.DataType.Integer.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.co.gaffe.proto.DataType.Integer} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.co.gaffe.proto.DataType.Integer.toObject = function(includeInstance, msg) {
  var f, obj = {
    typeVariationReference: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.co.gaffe.proto.DataType.Integer}
 */
proto.co.gaffe.proto.DataType.Integer.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.co.gaffe.proto.DataType.Integer;
  return proto.co.gaffe.proto.DataType.Integer.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.co.gaffe.proto.DataType.Integer} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.co.gaffe.proto.DataType.Integer}
 */
proto.co.gaffe.proto.DataType.Integer.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTypeVariationReference(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.co.gaffe.proto.DataType.Integer.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.co.gaffe.proto.DataType.Integer.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.co.gaffe.proto.DataType.Integer} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.co.gaffe.proto.DataType.Integer.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTypeVariationReference();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 type_variation_reference = 1;
 * @return {number}
 */
proto.co.gaffe.proto.DataType.Integer.prototype.getTypeVariationReference = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.co.gaffe.proto.DataType.Integer} returns this
 */
proto.co.gaffe.proto.DataType.Integer.prototype.setTypeVariationReference = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.co.gaffe.proto.DataType.Long.prototype.toObject = function(opt_includeInstance) {
  return proto.co.gaffe.proto.DataType.Long.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.co.gaffe.proto.DataType.Long} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.co.gaffe.proto.DataType.Long.toObject = function(includeInstance, msg) {
  var f, obj = {
    typeVariationReference: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.co.gaffe.proto.DataType.Long}
 */
proto.co.gaffe.proto.DataType.Long.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.co.gaffe.proto.DataType.Long;
  return proto.co.gaffe.proto.DataType.Long.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.co.gaffe.proto.DataType.Long} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.co.gaffe.proto.DataType.Long}
 */
proto.co.gaffe.proto.DataType.Long.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTypeVariationReference(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.co.gaffe.proto.DataType.Long.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.co.gaffe.proto.DataType.Long.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.co.gaffe.proto.DataType.Long} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.co.gaffe.proto.DataType.Long.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTypeVariationReference();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 type_variation_reference = 1;
 * @return {number}
 */
proto.co.gaffe.proto.DataType.Long.prototype.getTypeVariationReference = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.co.gaffe.proto.DataType.Long} returns this
 */
proto.co.gaffe.proto.DataType.Long.prototype.setTypeVariationReference = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.co.gaffe.proto.DataType.Float.prototype.toObject = function(opt_includeInstance) {
  return proto.co.gaffe.proto.DataType.Float.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.co.gaffe.proto.DataType.Float} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.co.gaffe.proto.DataType.Float.toObject = function(includeInstance, msg) {
  var f, obj = {
    typeVariationReference: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.co.gaffe.proto.DataType.Float}
 */
proto.co.gaffe.proto.DataType.Float.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.co.gaffe.proto.DataType.Float;
  return proto.co.gaffe.proto.DataType.Float.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.co.gaffe.proto.DataType.Float} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.co.gaffe.proto.DataType.Float}
 */
proto.co.gaffe.proto.DataType.Float.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTypeVariationReference(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.co.gaffe.proto.DataType.Float.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.co.gaffe.proto.DataType.Float.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.co.gaffe.proto.DataType.Float} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.co.gaffe.proto.DataType.Float.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTypeVariationReference();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 type_variation_reference = 1;
 * @return {number}
 */
proto.co.gaffe.proto.DataType.Float.prototype.getTypeVariationReference = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.co.gaffe.proto.DataType.Float} returns this
 */
proto.co.gaffe.proto.DataType.Float.prototype.setTypeVariationReference = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.co.gaffe.proto.DataType.Double.prototype.toObject = function(opt_includeInstance) {
  return proto.co.gaffe.proto.DataType.Double.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.co.gaffe.proto.DataType.Double} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.co.gaffe.proto.DataType.Double.toObject = function(includeInstance, msg) {
  var f, obj = {
    typeVariationReference: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.co.gaffe.proto.DataType.Double}
 */
proto.co.gaffe.proto.DataType.Double.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.co.gaffe.proto.DataType.Double;
  return proto.co.gaffe.proto.DataType.Double.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.co.gaffe.proto.DataType.Double} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.co.gaffe.proto.DataType.Double}
 */
proto.co.gaffe.proto.DataType.Double.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTypeVariationReference(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.co.gaffe.proto.DataType.Double.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.co.gaffe.proto.DataType.Double.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.co.gaffe.proto.DataType.Double} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.co.gaffe.proto.DataType.Double.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTypeVariationReference();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 type_variation_reference = 1;
 * @return {number}
 */
proto.co.gaffe.proto.DataType.Double.prototype.getTypeVariationReference = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.co.gaffe.proto.DataType.Double} returns this
 */
proto.co.gaffe.proto.DataType.Double.prototype.setTypeVariationReference = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.co.gaffe.proto.DataType.String.prototype.toObject = function(opt_includeInstance) {
  return proto.co.gaffe.proto.DataType.String.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.co.gaffe.proto.DataType.String} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.co.gaffe.proto.DataType.String.toObject = function(includeInstance, msg) {
  var f, obj = {
    typeVariationReference: jspb.Message.getFieldWithDefault(msg, 1, 0),
    collationId: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.co.gaffe.proto.DataType.String}
 */
proto.co.gaffe.proto.DataType.String.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.co.gaffe.proto.DataType.String;
  return proto.co.gaffe.proto.DataType.String.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.co.gaffe.proto.DataType.String} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.co.gaffe.proto.DataType.String}
 */
proto.co.gaffe.proto.DataType.String.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTypeVariationReference(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCollationId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.co.gaffe.proto.DataType.String.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.co.gaffe.proto.DataType.String.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.co.gaffe.proto.DataType.String} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.co.gaffe.proto.DataType.String.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTypeVariationReference();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getCollationId();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional uint32 type_variation_reference = 1;
 * @return {number}
 */
proto.co.gaffe.proto.DataType.String.prototype.getTypeVariationReference = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.co.gaffe.proto.DataType.String} returns this
 */
proto.co.gaffe.proto.DataType.String.prototype.setTypeVariationReference = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 collation_id = 2;
 * @return {number}
 */
proto.co.gaffe.proto.DataType.String.prototype.getCollationId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.co.gaffe.proto.DataType.String} returns this
 */
proto.co.gaffe.proto.DataType.String.prototype.setCollationId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.co.gaffe.proto.DataType.Binary.prototype.toObject = function(opt_includeInstance) {
  return proto.co.gaffe.proto.DataType.Binary.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.co.gaffe.proto.DataType.Binary} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.co.gaffe.proto.DataType.Binary.toObject = function(includeInstance, msg) {
  var f, obj = {
    typeVariationReference: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.co.gaffe.proto.DataType.Binary}
 */
proto.co.gaffe.proto.DataType.Binary.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.co.gaffe.proto.DataType.Binary;
  return proto.co.gaffe.proto.DataType.Binary.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.co.gaffe.proto.DataType.Binary} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.co.gaffe.proto.DataType.Binary}
 */
proto.co.gaffe.proto.DataType.Binary.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTypeVariationReference(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.co.gaffe.proto.DataType.Binary.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.co.gaffe.proto.DataType.Binary.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.co.gaffe.proto.DataType.Binary} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.co.gaffe.proto.DataType.Binary.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTypeVariationReference();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 type_variation_reference = 1;
 * @return {number}
 */
proto.co.gaffe.proto.DataType.Binary.prototype.getTypeVariationReference = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.co.gaffe.proto.DataType.Binary} returns this
 */
proto.co.gaffe.proto.DataType.Binary.prototype.setTypeVariationReference = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.co.gaffe.proto.DataType.NULL.prototype.toObject = function(opt_includeInstance) {
  return proto.co.gaffe.proto.DataType.NULL.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.co.gaffe.proto.DataType.NULL} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.co.gaffe.proto.DataType.NULL.toObject = function(includeInstance, msg) {
  var f, obj = {
    typeVariationReference: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.co.gaffe.proto.DataType.NULL}
 */
proto.co.gaffe.proto.DataType.NULL.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.co.gaffe.proto.DataType.NULL;
  return proto.co.gaffe.proto.DataType.NULL.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.co.gaffe.proto.DataType.NULL} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.co.gaffe.proto.DataType.NULL}
 */
proto.co.gaffe.proto.DataType.NULL.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTypeVariationReference(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.co.gaffe.proto.DataType.NULL.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.co.gaffe.proto.DataType.NULL.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.co.gaffe.proto.DataType.NULL} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.co.gaffe.proto.DataType.NULL.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTypeVariationReference();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 type_variation_reference = 1;
 * @return {number}
 */
proto.co.gaffe.proto.DataType.NULL.prototype.getTypeVariationReference = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.co.gaffe.proto.DataType.NULL} returns this
 */
proto.co.gaffe.proto.DataType.NULL.prototype.setTypeVariationReference = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.co.gaffe.proto.DataType.Timestamp.prototype.toObject = function(opt_includeInstance) {
  return proto.co.gaffe.proto.DataType.Timestamp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.co.gaffe.proto.DataType.Timestamp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.co.gaffe.proto.DataType.Timestamp.toObject = function(includeInstance, msg) {
  var f, obj = {
    typeVariationReference: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.co.gaffe.proto.DataType.Timestamp}
 */
proto.co.gaffe.proto.DataType.Timestamp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.co.gaffe.proto.DataType.Timestamp;
  return proto.co.gaffe.proto.DataType.Timestamp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.co.gaffe.proto.DataType.Timestamp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.co.gaffe.proto.DataType.Timestamp}
 */
proto.co.gaffe.proto.DataType.Timestamp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTypeVariationReference(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.co.gaffe.proto.DataType.Timestamp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.co.gaffe.proto.DataType.Timestamp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.co.gaffe.proto.DataType.Timestamp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.co.gaffe.proto.DataType.Timestamp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTypeVariationReference();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 type_variation_reference = 1;
 * @return {number}
 */
proto.co.gaffe.proto.DataType.Timestamp.prototype.getTypeVariationReference = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.co.gaffe.proto.DataType.Timestamp} returns this
 */
proto.co.gaffe.proto.DataType.Timestamp.prototype.setTypeVariationReference = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.co.gaffe.proto.DataType.Date.prototype.toObject = function(opt_includeInstance) {
  return proto.co.gaffe.proto.DataType.Date.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.co.gaffe.proto.DataType.Date} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.co.gaffe.proto.DataType.Date.toObject = function(includeInstance, msg) {
  var f, obj = {
    typeVariationReference: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.co.gaffe.proto.DataType.Date}
 */
proto.co.gaffe.proto.DataType.Date.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.co.gaffe.proto.DataType.Date;
  return proto.co.gaffe.proto.DataType.Date.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.co.gaffe.proto.DataType.Date} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.co.gaffe.proto.DataType.Date}
 */
proto.co.gaffe.proto.DataType.Date.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTypeVariationReference(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.co.gaffe.proto.DataType.Date.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.co.gaffe.proto.DataType.Date.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.co.gaffe.proto.DataType.Date} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.co.gaffe.proto.DataType.Date.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTypeVariationReference();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 type_variation_reference = 1;
 * @return {number}
 */
proto.co.gaffe.proto.DataType.Date.prototype.getTypeVariationReference = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.co.gaffe.proto.DataType.Date} returns this
 */
proto.co.gaffe.proto.DataType.Date.prototype.setTypeVariationReference = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.co.gaffe.proto.DataType.TimestampNTZ.prototype.toObject = function(opt_includeInstance) {
  return proto.co.gaffe.proto.DataType.TimestampNTZ.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.co.gaffe.proto.DataType.TimestampNTZ} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.co.gaffe.proto.DataType.TimestampNTZ.toObject = function(includeInstance, msg) {
  var f, obj = {
    typeVariationReference: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.co.gaffe.proto.DataType.TimestampNTZ}
 */
proto.co.gaffe.proto.DataType.TimestampNTZ.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.co.gaffe.proto.DataType.TimestampNTZ;
  return proto.co.gaffe.proto.DataType.TimestampNTZ.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.co.gaffe.proto.DataType.TimestampNTZ} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.co.gaffe.proto.DataType.TimestampNTZ}
 */
proto.co.gaffe.proto.DataType.TimestampNTZ.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTypeVariationReference(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.co.gaffe.proto.DataType.TimestampNTZ.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.co.gaffe.proto.DataType.TimestampNTZ.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.co.gaffe.proto.DataType.TimestampNTZ} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.co.gaffe.proto.DataType.TimestampNTZ.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTypeVariationReference();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 type_variation_reference = 1;
 * @return {number}
 */
proto.co.gaffe.proto.DataType.TimestampNTZ.prototype.getTypeVariationReference = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.co.gaffe.proto.DataType.TimestampNTZ} returns this
 */
proto.co.gaffe.proto.DataType.TimestampNTZ.prototype.setTypeVariationReference = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.co.gaffe.proto.DataType.CalendarInterval.prototype.toObject = function(opt_includeInstance) {
  return proto.co.gaffe.proto.DataType.CalendarInterval.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.co.gaffe.proto.DataType.CalendarInterval} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.co.gaffe.proto.DataType.CalendarInterval.toObject = function(includeInstance, msg) {
  var f, obj = {
    typeVariationReference: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.co.gaffe.proto.DataType.CalendarInterval}
 */
proto.co.gaffe.proto.DataType.CalendarInterval.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.co.gaffe.proto.DataType.CalendarInterval;
  return proto.co.gaffe.proto.DataType.CalendarInterval.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.co.gaffe.proto.DataType.CalendarInterval} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.co.gaffe.proto.DataType.CalendarInterval}
 */
proto.co.gaffe.proto.DataType.CalendarInterval.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTypeVariationReference(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.co.gaffe.proto.DataType.CalendarInterval.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.co.gaffe.proto.DataType.CalendarInterval.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.co.gaffe.proto.DataType.CalendarInterval} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.co.gaffe.proto.DataType.CalendarInterval.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTypeVariationReference();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 type_variation_reference = 1;
 * @return {number}
 */
proto.co.gaffe.proto.DataType.CalendarInterval.prototype.getTypeVariationReference = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.co.gaffe.proto.DataType.CalendarInterval} returns this
 */
proto.co.gaffe.proto.DataType.CalendarInterval.prototype.setTypeVariationReference = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.co.gaffe.proto.DataType.YearMonthInterval.prototype.toObject = function(opt_includeInstance) {
  return proto.co.gaffe.proto.DataType.YearMonthInterval.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.co.gaffe.proto.DataType.YearMonthInterval} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.co.gaffe.proto.DataType.YearMonthInterval.toObject = function(includeInstance, msg) {
  var f, obj = {
    startField: jspb.Message.getFieldWithDefault(msg, 1, 0),
    endField: jspb.Message.getFieldWithDefault(msg, 2, 0),
    typeVariationReference: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.co.gaffe.proto.DataType.YearMonthInterval}
 */
proto.co.gaffe.proto.DataType.YearMonthInterval.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.co.gaffe.proto.DataType.YearMonthInterval;
  return proto.co.gaffe.proto.DataType.YearMonthInterval.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.co.gaffe.proto.DataType.YearMonthInterval} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.co.gaffe.proto.DataType.YearMonthInterval}
 */
proto.co.gaffe.proto.DataType.YearMonthInterval.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setStartField(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setEndField(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTypeVariationReference(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.co.gaffe.proto.DataType.YearMonthInterval.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.co.gaffe.proto.DataType.YearMonthInterval.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.co.gaffe.proto.DataType.YearMonthInterval} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.co.gaffe.proto.DataType.YearMonthInterval.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getTypeVariationReference();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * optional int32 start_field = 1;
 * @return {number}
 */
proto.co.gaffe.proto.DataType.YearMonthInterval.prototype.getStartField = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.co.gaffe.proto.DataType.YearMonthInterval} returns this
 */
proto.co.gaffe.proto.DataType.YearMonthInterval.prototype.setStartField = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.co.gaffe.proto.DataType.YearMonthInterval} returns this
 */
proto.co.gaffe.proto.DataType.YearMonthInterval.prototype.clearStartField = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.co.gaffe.proto.DataType.YearMonthInterval.prototype.hasStartField = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 end_field = 2;
 * @return {number}
 */
proto.co.gaffe.proto.DataType.YearMonthInterval.prototype.getEndField = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.co.gaffe.proto.DataType.YearMonthInterval} returns this
 */
proto.co.gaffe.proto.DataType.YearMonthInterval.prototype.setEndField = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.co.gaffe.proto.DataType.YearMonthInterval} returns this
 */
proto.co.gaffe.proto.DataType.YearMonthInterval.prototype.clearEndField = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.co.gaffe.proto.DataType.YearMonthInterval.prototype.hasEndField = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional uint32 type_variation_reference = 3;
 * @return {number}
 */
proto.co.gaffe.proto.DataType.YearMonthInterval.prototype.getTypeVariationReference = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.co.gaffe.proto.DataType.YearMonthInterval} returns this
 */
proto.co.gaffe.proto.DataType.YearMonthInterval.prototype.setTypeVariationReference = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.co.gaffe.proto.DataType.DayTimeInterval.prototype.toObject = function(opt_includeInstance) {
  return proto.co.gaffe.proto.DataType.DayTimeInterval.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.co.gaffe.proto.DataType.DayTimeInterval} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.co.gaffe.proto.DataType.DayTimeInterval.toObject = function(includeInstance, msg) {
  var f, obj = {
    startField: jspb.Message.getFieldWithDefault(msg, 1, 0),
    endField: jspb.Message.getFieldWithDefault(msg, 2, 0),
    typeVariationReference: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.co.gaffe.proto.DataType.DayTimeInterval}
 */
proto.co.gaffe.proto.DataType.DayTimeInterval.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.co.gaffe.proto.DataType.DayTimeInterval;
  return proto.co.gaffe.proto.DataType.DayTimeInterval.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.co.gaffe.proto.DataType.DayTimeInterval} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.co.gaffe.proto.DataType.DayTimeInterval}
 */
proto.co.gaffe.proto.DataType.DayTimeInterval.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setStartField(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setEndField(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTypeVariationReference(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.co.gaffe.proto.DataType.DayTimeInterval.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.co.gaffe.proto.DataType.DayTimeInterval.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.co.gaffe.proto.DataType.DayTimeInterval} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.co.gaffe.proto.DataType.DayTimeInterval.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getTypeVariationReference();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * optional int32 start_field = 1;
 * @return {number}
 */
proto.co.gaffe.proto.DataType.DayTimeInterval.prototype.getStartField = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.co.gaffe.proto.DataType.DayTimeInterval} returns this
 */
proto.co.gaffe.proto.DataType.DayTimeInterval.prototype.setStartField = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.co.gaffe.proto.DataType.DayTimeInterval} returns this
 */
proto.co.gaffe.proto.DataType.DayTimeInterval.prototype.clearStartField = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.co.gaffe.proto.DataType.DayTimeInterval.prototype.hasStartField = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 end_field = 2;
 * @return {number}
 */
proto.co.gaffe.proto.DataType.DayTimeInterval.prototype.getEndField = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.co.gaffe.proto.DataType.DayTimeInterval} returns this
 */
proto.co.gaffe.proto.DataType.DayTimeInterval.prototype.setEndField = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.co.gaffe.proto.DataType.DayTimeInterval} returns this
 */
proto.co.gaffe.proto.DataType.DayTimeInterval.prototype.clearEndField = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.co.gaffe.proto.DataType.DayTimeInterval.prototype.hasEndField = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional uint32 type_variation_reference = 3;
 * @return {number}
 */
proto.co.gaffe.proto.DataType.DayTimeInterval.prototype.getTypeVariationReference = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.co.gaffe.proto.DataType.DayTimeInterval} returns this
 */
proto.co.gaffe.proto.DataType.DayTimeInterval.prototype.setTypeVariationReference = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.co.gaffe.proto.DataType.Char.prototype.toObject = function(opt_includeInstance) {
  return proto.co.gaffe.proto.DataType.Char.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.co.gaffe.proto.DataType.Char} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.co.gaffe.proto.DataType.Char.toObject = function(includeInstance, msg) {
  var f, obj = {
    length: jspb.Message.getFieldWithDefault(msg, 1, 0),
    typeVariationReference: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.co.gaffe.proto.DataType.Char}
 */
proto.co.gaffe.proto.DataType.Char.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.co.gaffe.proto.DataType.Char;
  return proto.co.gaffe.proto.DataType.Char.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.co.gaffe.proto.DataType.Char} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.co.gaffe.proto.DataType.Char}
 */
proto.co.gaffe.proto.DataType.Char.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLength(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTypeVariationReference(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.co.gaffe.proto.DataType.Char.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.co.gaffe.proto.DataType.Char.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.co.gaffe.proto.DataType.Char} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.co.gaffe.proto.DataType.Char.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLength();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getTypeVariationReference();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional int32 length = 1;
 * @return {number}
 */
proto.co.gaffe.proto.DataType.Char.prototype.getLength = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.co.gaffe.proto.DataType.Char} returns this
 */
proto.co.gaffe.proto.DataType.Char.prototype.setLength = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 type_variation_reference = 2;
 * @return {number}
 */
proto.co.gaffe.proto.DataType.Char.prototype.getTypeVariationReference = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.co.gaffe.proto.DataType.Char} returns this
 */
proto.co.gaffe.proto.DataType.Char.prototype.setTypeVariationReference = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.co.gaffe.proto.DataType.VarChar.prototype.toObject = function(opt_includeInstance) {
  return proto.co.gaffe.proto.DataType.VarChar.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.co.gaffe.proto.DataType.VarChar} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.co.gaffe.proto.DataType.VarChar.toObject = function(includeInstance, msg) {
  var f, obj = {
    length: jspb.Message.getFieldWithDefault(msg, 1, 0),
    typeVariationReference: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.co.gaffe.proto.DataType.VarChar}
 */
proto.co.gaffe.proto.DataType.VarChar.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.co.gaffe.proto.DataType.VarChar;
  return proto.co.gaffe.proto.DataType.VarChar.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.co.gaffe.proto.DataType.VarChar} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.co.gaffe.proto.DataType.VarChar}
 */
proto.co.gaffe.proto.DataType.VarChar.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLength(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTypeVariationReference(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.co.gaffe.proto.DataType.VarChar.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.co.gaffe.proto.DataType.VarChar.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.co.gaffe.proto.DataType.VarChar} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.co.gaffe.proto.DataType.VarChar.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLength();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getTypeVariationReference();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional int32 length = 1;
 * @return {number}
 */
proto.co.gaffe.proto.DataType.VarChar.prototype.getLength = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.co.gaffe.proto.DataType.VarChar} returns this
 */
proto.co.gaffe.proto.DataType.VarChar.prototype.setLength = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 type_variation_reference = 2;
 * @return {number}
 */
proto.co.gaffe.proto.DataType.VarChar.prototype.getTypeVariationReference = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.co.gaffe.proto.DataType.VarChar} returns this
 */
proto.co.gaffe.proto.DataType.VarChar.prototype.setTypeVariationReference = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.co.gaffe.proto.DataType.Decimal.prototype.toObject = function(opt_includeInstance) {
  return proto.co.gaffe.proto.DataType.Decimal.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.co.gaffe.proto.DataType.Decimal} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.co.gaffe.proto.DataType.Decimal.toObject = function(includeInstance, msg) {
  var f, obj = {
    scale: jspb.Message.getFieldWithDefault(msg, 1, 0),
    precision: jspb.Message.getFieldWithDefault(msg, 2, 0),
    typeVariationReference: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.co.gaffe.proto.DataType.Decimal}
 */
proto.co.gaffe.proto.DataType.Decimal.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.co.gaffe.proto.DataType.Decimal;
  return proto.co.gaffe.proto.DataType.Decimal.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.co.gaffe.proto.DataType.Decimal} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.co.gaffe.proto.DataType.Decimal}
 */
proto.co.gaffe.proto.DataType.Decimal.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setScale(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPrecision(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTypeVariationReference(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.co.gaffe.proto.DataType.Decimal.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.co.gaffe.proto.DataType.Decimal.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.co.gaffe.proto.DataType.Decimal} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.co.gaffe.proto.DataType.Decimal.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getTypeVariationReference();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * optional int32 scale = 1;
 * @return {number}
 */
proto.co.gaffe.proto.DataType.Decimal.prototype.getScale = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.co.gaffe.proto.DataType.Decimal} returns this
 */
proto.co.gaffe.proto.DataType.Decimal.prototype.setScale = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.co.gaffe.proto.DataType.Decimal} returns this
 */
proto.co.gaffe.proto.DataType.Decimal.prototype.clearScale = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.co.gaffe.proto.DataType.Decimal.prototype.hasScale = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 precision = 2;
 * @return {number}
 */
proto.co.gaffe.proto.DataType.Decimal.prototype.getPrecision = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.co.gaffe.proto.DataType.Decimal} returns this
 */
proto.co.gaffe.proto.DataType.Decimal.prototype.setPrecision = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.co.gaffe.proto.DataType.Decimal} returns this
 */
proto.co.gaffe.proto.DataType.Decimal.prototype.clearPrecision = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.co.gaffe.proto.DataType.Decimal.prototype.hasPrecision = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional uint32 type_variation_reference = 3;
 * @return {number}
 */
proto.co.gaffe.proto.DataType.Decimal.prototype.getTypeVariationReference = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.co.gaffe.proto.DataType.Decimal} returns this
 */
proto.co.gaffe.proto.DataType.Decimal.prototype.setTypeVariationReference = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.co.gaffe.proto.DataType.StructField.prototype.toObject = function(opt_includeInstance) {
  return proto.co.gaffe.proto.DataType.StructField.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.co.gaffe.proto.DataType.StructField} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.co.gaffe.proto.DataType.StructField.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    dataType: (f = msg.getDataType()) && proto.co.gaffe.proto.DataType.toObject(includeInstance, f),
    nullable: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
    metadata: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.co.gaffe.proto.DataType.StructField}
 */
proto.co.gaffe.proto.DataType.StructField.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.co.gaffe.proto.DataType.StructField;
  return proto.co.gaffe.proto.DataType.StructField.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.co.gaffe.proto.DataType.StructField} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.co.gaffe.proto.DataType.StructField}
 */
proto.co.gaffe.proto.DataType.StructField.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = new proto.co.gaffe.proto.DataType;
      reader.readMessage(value,proto.co.gaffe.proto.DataType.deserializeBinaryFromReader);
      msg.setDataType(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setNullable(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setMetadata(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.co.gaffe.proto.DataType.StructField.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.co.gaffe.proto.DataType.StructField.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.co.gaffe.proto.DataType.StructField} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.co.gaffe.proto.DataType.StructField.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDataType();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.co.gaffe.proto.DataType.serializeBinaryToWriter
    );
  }
  f = message.getNullable();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.co.gaffe.proto.DataType.StructField.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.co.gaffe.proto.DataType.StructField} returns this
 */
proto.co.gaffe.proto.DataType.StructField.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional DataType data_type = 2;
 * @return {?proto.co.gaffe.proto.DataType}
 */
proto.co.gaffe.proto.DataType.StructField.prototype.getDataType = function() {
  return /** @type{?proto.co.gaffe.proto.DataType} */ (
    jspb.Message.getWrapperField(this, proto.co.gaffe.proto.DataType, 2));
};


/**
 * @param {?proto.co.gaffe.proto.DataType|undefined} value
 * @return {!proto.co.gaffe.proto.DataType.StructField} returns this
*/
proto.co.gaffe.proto.DataType.StructField.prototype.setDataType = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.co.gaffe.proto.DataType.StructField} returns this
 */
proto.co.gaffe.proto.DataType.StructField.prototype.clearDataType = function() {
  return this.setDataType(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.co.gaffe.proto.DataType.StructField.prototype.hasDataType = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bool nullable = 3;
 * @return {boolean}
 */
proto.co.gaffe.proto.DataType.StructField.prototype.getNullable = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.co.gaffe.proto.DataType.StructField} returns this
 */
proto.co.gaffe.proto.DataType.StructField.prototype.setNullable = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional string metadata = 4;
 * @return {string}
 */
proto.co.gaffe.proto.DataType.StructField.prototype.getMetadata = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.co.gaffe.proto.DataType.StructField} returns this
 */
proto.co.gaffe.proto.DataType.StructField.prototype.setMetadata = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.co.gaffe.proto.DataType.StructField} returns this
 */
proto.co.gaffe.proto.DataType.StructField.prototype.clearMetadata = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.co.gaffe.proto.DataType.StructField.prototype.hasMetadata = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.co.gaffe.proto.DataType.Struct.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.co.gaffe.proto.DataType.Struct.prototype.toObject = function(opt_includeInstance) {
  return proto.co.gaffe.proto.DataType.Struct.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.co.gaffe.proto.DataType.Struct} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.co.gaffe.proto.DataType.Struct.toObject = function(includeInstance, msg) {
  var f, obj = {
    fieldsList: jspb.Message.toObjectList(msg.getFieldsList(),
    proto.co.gaffe.proto.DataType.StructField.toObject, includeInstance),
    typeVariationReference: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.co.gaffe.proto.DataType.Struct}
 */
proto.co.gaffe.proto.DataType.Struct.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.co.gaffe.proto.DataType.Struct;
  return proto.co.gaffe.proto.DataType.Struct.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.co.gaffe.proto.DataType.Struct} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.co.gaffe.proto.DataType.Struct}
 */
proto.co.gaffe.proto.DataType.Struct.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.co.gaffe.proto.DataType.StructField;
      reader.readMessage(value,proto.co.gaffe.proto.DataType.StructField.deserializeBinaryFromReader);
      msg.addFields(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTypeVariationReference(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.co.gaffe.proto.DataType.Struct.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.co.gaffe.proto.DataType.Struct.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.co.gaffe.proto.DataType.Struct} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.co.gaffe.proto.DataType.Struct.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFieldsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.co.gaffe.proto.DataType.StructField.serializeBinaryToWriter
    );
  }
  f = message.getTypeVariationReference();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * repeated StructField fields = 1;
 * @return {!Array<!proto.co.gaffe.proto.DataType.StructField>}
 */
proto.co.gaffe.proto.DataType.Struct.prototype.getFieldsList = function() {
  return /** @type{!Array<!proto.co.gaffe.proto.DataType.StructField>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.co.gaffe.proto.DataType.StructField, 1));
};


/**
 * @param {!Array<!proto.co.gaffe.proto.DataType.StructField>} value
 * @return {!proto.co.gaffe.proto.DataType.Struct} returns this
*/
proto.co.gaffe.proto.DataType.Struct.prototype.setFieldsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.co.gaffe.proto.DataType.StructField=} opt_value
 * @param {number=} opt_index
 * @return {!proto.co.gaffe.proto.DataType.StructField}
 */
proto.co.gaffe.proto.DataType.Struct.prototype.addFields = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.co.gaffe.proto.DataType.StructField, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.co.gaffe.proto.DataType.Struct} returns this
 */
proto.co.gaffe.proto.DataType.Struct.prototype.clearFieldsList = function() {
  return this.setFieldsList([]);
};


/**
 * optional uint32 type_variation_reference = 2;
 * @return {number}
 */
proto.co.gaffe.proto.DataType.Struct.prototype.getTypeVariationReference = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.co.gaffe.proto.DataType.Struct} returns this
 */
proto.co.gaffe.proto.DataType.Struct.prototype.setTypeVariationReference = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.co.gaffe.proto.DataType.Array.prototype.toObject = function(opt_includeInstance) {
  return proto.co.gaffe.proto.DataType.Array.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.co.gaffe.proto.DataType.Array} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.co.gaffe.proto.DataType.Array.toObject = function(includeInstance, msg) {
  var f, obj = {
    elementType: (f = msg.getElementType()) && proto.co.gaffe.proto.DataType.toObject(includeInstance, f),
    containsNull: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    typeVariationReference: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.co.gaffe.proto.DataType.Array}
 */
proto.co.gaffe.proto.DataType.Array.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.co.gaffe.proto.DataType.Array;
  return proto.co.gaffe.proto.DataType.Array.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.co.gaffe.proto.DataType.Array} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.co.gaffe.proto.DataType.Array}
 */
proto.co.gaffe.proto.DataType.Array.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.co.gaffe.proto.DataType;
      reader.readMessage(value,proto.co.gaffe.proto.DataType.deserializeBinaryFromReader);
      msg.setElementType(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setContainsNull(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTypeVariationReference(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.co.gaffe.proto.DataType.Array.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.co.gaffe.proto.DataType.Array.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.co.gaffe.proto.DataType.Array} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.co.gaffe.proto.DataType.Array.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getElementType();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.co.gaffe.proto.DataType.serializeBinaryToWriter
    );
  }
  f = message.getContainsNull();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getTypeVariationReference();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * optional DataType element_type = 1;
 * @return {?proto.co.gaffe.proto.DataType}
 */
proto.co.gaffe.proto.DataType.Array.prototype.getElementType = function() {
  return /** @type{?proto.co.gaffe.proto.DataType} */ (
    jspb.Message.getWrapperField(this, proto.co.gaffe.proto.DataType, 1));
};


/**
 * @param {?proto.co.gaffe.proto.DataType|undefined} value
 * @return {!proto.co.gaffe.proto.DataType.Array} returns this
*/
proto.co.gaffe.proto.DataType.Array.prototype.setElementType = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.co.gaffe.proto.DataType.Array} returns this
 */
proto.co.gaffe.proto.DataType.Array.prototype.clearElementType = function() {
  return this.setElementType(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.co.gaffe.proto.DataType.Array.prototype.hasElementType = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bool contains_null = 2;
 * @return {boolean}
 */
proto.co.gaffe.proto.DataType.Array.prototype.getContainsNull = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.co.gaffe.proto.DataType.Array} returns this
 */
proto.co.gaffe.proto.DataType.Array.prototype.setContainsNull = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional uint32 type_variation_reference = 3;
 * @return {number}
 */
proto.co.gaffe.proto.DataType.Array.prototype.getTypeVariationReference = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.co.gaffe.proto.DataType.Array} returns this
 */
proto.co.gaffe.proto.DataType.Array.prototype.setTypeVariationReference = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.co.gaffe.proto.DataType.Map.prototype.toObject = function(opt_includeInstance) {
  return proto.co.gaffe.proto.DataType.Map.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.co.gaffe.proto.DataType.Map} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.co.gaffe.proto.DataType.Map.toObject = function(includeInstance, msg) {
  var f, obj = {
    keyType: (f = msg.getKeyType()) && proto.co.gaffe.proto.DataType.toObject(includeInstance, f),
    valueType: (f = msg.getValueType()) && proto.co.gaffe.proto.DataType.toObject(includeInstance, f),
    valueContainsNull: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
    typeVariationReference: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.co.gaffe.proto.DataType.Map}
 */
proto.co.gaffe.proto.DataType.Map.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.co.gaffe.proto.DataType.Map;
  return proto.co.gaffe.proto.DataType.Map.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.co.gaffe.proto.DataType.Map} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.co.gaffe.proto.DataType.Map}
 */
proto.co.gaffe.proto.DataType.Map.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.co.gaffe.proto.DataType;
      reader.readMessage(value,proto.co.gaffe.proto.DataType.deserializeBinaryFromReader);
      msg.setKeyType(value);
      break;
    case 2:
      var value = new proto.co.gaffe.proto.DataType;
      reader.readMessage(value,proto.co.gaffe.proto.DataType.deserializeBinaryFromReader);
      msg.setValueType(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setValueContainsNull(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTypeVariationReference(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.co.gaffe.proto.DataType.Map.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.co.gaffe.proto.DataType.Map.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.co.gaffe.proto.DataType.Map} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.co.gaffe.proto.DataType.Map.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKeyType();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.co.gaffe.proto.DataType.serializeBinaryToWriter
    );
  }
  f = message.getValueType();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.co.gaffe.proto.DataType.serializeBinaryToWriter
    );
  }
  f = message.getValueContainsNull();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getTypeVariationReference();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
};


/**
 * optional DataType key_type = 1;
 * @return {?proto.co.gaffe.proto.DataType}
 */
proto.co.gaffe.proto.DataType.Map.prototype.getKeyType = function() {
  return /** @type{?proto.co.gaffe.proto.DataType} */ (
    jspb.Message.getWrapperField(this, proto.co.gaffe.proto.DataType, 1));
};


/**
 * @param {?proto.co.gaffe.proto.DataType|undefined} value
 * @return {!proto.co.gaffe.proto.DataType.Map} returns this
*/
proto.co.gaffe.proto.DataType.Map.prototype.setKeyType = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.co.gaffe.proto.DataType.Map} returns this
 */
proto.co.gaffe.proto.DataType.Map.prototype.clearKeyType = function() {
  return this.setKeyType(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.co.gaffe.proto.DataType.Map.prototype.hasKeyType = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional DataType value_type = 2;
 * @return {?proto.co.gaffe.proto.DataType}
 */
proto.co.gaffe.proto.DataType.Map.prototype.getValueType = function() {
  return /** @type{?proto.co.gaffe.proto.DataType} */ (
    jspb.Message.getWrapperField(this, proto.co.gaffe.proto.DataType, 2));
};


/**
 * @param {?proto.co.gaffe.proto.DataType|undefined} value
 * @return {!proto.co.gaffe.proto.DataType.Map} returns this
*/
proto.co.gaffe.proto.DataType.Map.prototype.setValueType = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.co.gaffe.proto.DataType.Map} returns this
 */
proto.co.gaffe.proto.DataType.Map.prototype.clearValueType = function() {
  return this.setValueType(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.co.gaffe.proto.DataType.Map.prototype.hasValueType = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bool value_contains_null = 3;
 * @return {boolean}
 */
proto.co.gaffe.proto.DataType.Map.prototype.getValueContainsNull = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.co.gaffe.proto.DataType.Map} returns this
 */
proto.co.gaffe.proto.DataType.Map.prototype.setValueContainsNull = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional uint32 type_variation_reference = 4;
 * @return {number}
 */
proto.co.gaffe.proto.DataType.Map.prototype.getTypeVariationReference = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.co.gaffe.proto.DataType.Map} returns this
 */
proto.co.gaffe.proto.DataType.Map.prototype.setTypeVariationReference = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.co.gaffe.proto.DataType.Variant.prototype.toObject = function(opt_includeInstance) {
  return proto.co.gaffe.proto.DataType.Variant.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.co.gaffe.proto.DataType.Variant} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.co.gaffe.proto.DataType.Variant.toObject = function(includeInstance, msg) {
  var f, obj = {
    typeVariationReference: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.co.gaffe.proto.DataType.Variant}
 */
proto.co.gaffe.proto.DataType.Variant.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.co.gaffe.proto.DataType.Variant;
  return proto.co.gaffe.proto.DataType.Variant.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.co.gaffe.proto.DataType.Variant} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.co.gaffe.proto.DataType.Variant}
 */
proto.co.gaffe.proto.DataType.Variant.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTypeVariationReference(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.co.gaffe.proto.DataType.Variant.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.co.gaffe.proto.DataType.Variant.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.co.gaffe.proto.DataType.Variant} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.co.gaffe.proto.DataType.Variant.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTypeVariationReference();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 type_variation_reference = 1;
 * @return {number}
 */
proto.co.gaffe.proto.DataType.Variant.prototype.getTypeVariationReference = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.co.gaffe.proto.DataType.Variant} returns this
 */
proto.co.gaffe.proto.DataType.Variant.prototype.setTypeVariationReference = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.co.gaffe.proto.DataType.UDT.prototype.toObject = function(opt_includeInstance) {
  return proto.co.gaffe.proto.DataType.UDT.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.co.gaffe.proto.DataType.UDT} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.co.gaffe.proto.DataType.UDT.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, ""),
    jvmClass: jspb.Message.getFieldWithDefault(msg, 2, ""),
    pythonClass: jspb.Message.getFieldWithDefault(msg, 3, ""),
    serializedPythonClass: jspb.Message.getFieldWithDefault(msg, 4, ""),
    sqlType: (f = msg.getSqlType()) && proto.co.gaffe.proto.DataType.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.co.gaffe.proto.DataType.UDT}
 */
proto.co.gaffe.proto.DataType.UDT.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.co.gaffe.proto.DataType.UDT;
  return proto.co.gaffe.proto.DataType.UDT.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.co.gaffe.proto.DataType.UDT} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.co.gaffe.proto.DataType.UDT}
 */
proto.co.gaffe.proto.DataType.UDT.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setJvmClass(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setPythonClass(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setSerializedPythonClass(value);
      break;
    case 5:
      var value = new proto.co.gaffe.proto.DataType;
      reader.readMessage(value,proto.co.gaffe.proto.DataType.deserializeBinaryFromReader);
      msg.setSqlType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.co.gaffe.proto.DataType.UDT.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.co.gaffe.proto.DataType.UDT.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.co.gaffe.proto.DataType.UDT} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.co.gaffe.proto.DataType.UDT.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getSqlType();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.co.gaffe.proto.DataType.serializeBinaryToWriter
    );
  }
};


/**
 * optional string type = 1;
 * @return {string}
 */
proto.co.gaffe.proto.DataType.UDT.prototype.getType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.co.gaffe.proto.DataType.UDT} returns this
 */
proto.co.gaffe.proto.DataType.UDT.prototype.setType = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string jvm_class = 2;
 * @return {string}
 */
proto.co.gaffe.proto.DataType.UDT.prototype.getJvmClass = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.co.gaffe.proto.DataType.UDT} returns this
 */
proto.co.gaffe.proto.DataType.UDT.prototype.setJvmClass = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.co.gaffe.proto.DataType.UDT} returns this
 */
proto.co.gaffe.proto.DataType.UDT.prototype.clearJvmClass = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.co.gaffe.proto.DataType.UDT.prototype.hasJvmClass = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string python_class = 3;
 * @return {string}
 */
proto.co.gaffe.proto.DataType.UDT.prototype.getPythonClass = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.co.gaffe.proto.DataType.UDT} returns this
 */
proto.co.gaffe.proto.DataType.UDT.prototype.setPythonClass = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.co.gaffe.proto.DataType.UDT} returns this
 */
proto.co.gaffe.proto.DataType.UDT.prototype.clearPythonClass = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.co.gaffe.proto.DataType.UDT.prototype.hasPythonClass = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string serialized_python_class = 4;
 * @return {string}
 */
proto.co.gaffe.proto.DataType.UDT.prototype.getSerializedPythonClass = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.co.gaffe.proto.DataType.UDT} returns this
 */
proto.co.gaffe.proto.DataType.UDT.prototype.setSerializedPythonClass = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.co.gaffe.proto.DataType.UDT} returns this
 */
proto.co.gaffe.proto.DataType.UDT.prototype.clearSerializedPythonClass = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.co.gaffe.proto.DataType.UDT.prototype.hasSerializedPythonClass = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional DataType sql_type = 5;
 * @return {?proto.co.gaffe.proto.DataType}
 */
proto.co.gaffe.proto.DataType.UDT.prototype.getSqlType = function() {
  return /** @type{?proto.co.gaffe.proto.DataType} */ (
    jspb.Message.getWrapperField(this, proto.co.gaffe.proto.DataType, 5));
};


/**
 * @param {?proto.co.gaffe.proto.DataType|undefined} value
 * @return {!proto.co.gaffe.proto.DataType.UDT} returns this
*/
proto.co.gaffe.proto.DataType.UDT.prototype.setSqlType = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.co.gaffe.proto.DataType.UDT} returns this
 */
proto.co.gaffe.proto.DataType.UDT.prototype.clearSqlType = function() {
  return this.setSqlType(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.co.gaffe.proto.DataType.UDT.prototype.hasSqlType = function() {
  return jspb.Message.getField(this, 5) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.co.gaffe.proto.DataType.Unparsed.prototype.toObject = function(opt_includeInstance) {
  return proto.co.gaffe.proto.DataType.Unparsed.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.co.gaffe.proto.DataType.Unparsed} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.co.gaffe.proto.DataType.Unparsed.toObject = function(includeInstance, msg) {
  var f, obj = {
    dataTypeString: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.co.gaffe.proto.DataType.Unparsed}
 */
proto.co.gaffe.proto.DataType.Unparsed.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.co.gaffe.proto.DataType.Unparsed;
  return proto.co.gaffe.proto.DataType.Unparsed.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.co.gaffe.proto.DataType.Unparsed} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.co.gaffe.proto.DataType.Unparsed}
 */
proto.co.gaffe.proto.DataType.Unparsed.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDataTypeString(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.co.gaffe.proto.DataType.Unparsed.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.co.gaffe.proto.DataType.Unparsed.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.co.gaffe.proto.DataType.Unparsed} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.co.gaffe.proto.DataType.Unparsed.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDataTypeString();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string data_type_string = 1;
 * @return {string}
 */
proto.co.gaffe.proto.DataType.Unparsed.prototype.getDataTypeString = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.co.gaffe.proto.DataType.Unparsed} returns this
 */
proto.co.gaffe.proto.DataType.Unparsed.prototype.setDataTypeString = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional NULL null = 1;
 * @return {?proto.co.gaffe.proto.DataType.NULL}
 */
proto.co.gaffe.proto.DataType.prototype.getNull = function() {
  return /** @type{?proto.co.gaffe.proto.DataType.NULL} */ (
    jspb.Message.getWrapperField(this, proto.co.gaffe.proto.DataType.NULL, 1));
};


/**
 * @param {?proto.co.gaffe.proto.DataType.NULL|undefined} value
 * @return {!proto.co.gaffe.proto.DataType} returns this
*/
proto.co.gaffe.proto.DataType.prototype.setNull = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.co.gaffe.proto.DataType.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.co.gaffe.proto.DataType} returns this
 */
proto.co.gaffe.proto.DataType.prototype.clearNull = function() {
  return this.setNull(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.co.gaffe.proto.DataType.prototype.hasNull = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Binary binary = 2;
 * @return {?proto.co.gaffe.proto.DataType.Binary}
 */
proto.co.gaffe.proto.DataType.prototype.getBinary = function() {
  return /** @type{?proto.co.gaffe.proto.DataType.Binary} */ (
    jspb.Message.getWrapperField(this, proto.co.gaffe.proto.DataType.Binary, 2));
};


/**
 * @param {?proto.co.gaffe.proto.DataType.Binary|undefined} value
 * @return {!proto.co.gaffe.proto.DataType} returns this
*/
proto.co.gaffe.proto.DataType.prototype.setBinary = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.co.gaffe.proto.DataType.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.co.gaffe.proto.DataType} returns this
 */
proto.co.gaffe.proto.DataType.prototype.clearBinary = function() {
  return this.setBinary(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.co.gaffe.proto.DataType.prototype.hasBinary = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Boolean boolean = 3;
 * @return {?proto.co.gaffe.proto.DataType.Boolean}
 */
proto.co.gaffe.proto.DataType.prototype.getBoolean = function() {
  return /** @type{?proto.co.gaffe.proto.DataType.Boolean} */ (
    jspb.Message.getWrapperField(this, proto.co.gaffe.proto.DataType.Boolean, 3));
};


/**
 * @param {?proto.co.gaffe.proto.DataType.Boolean|undefined} value
 * @return {!proto.co.gaffe.proto.DataType} returns this
*/
proto.co.gaffe.proto.DataType.prototype.setBoolean = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.co.gaffe.proto.DataType.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.co.gaffe.proto.DataType} returns this
 */
proto.co.gaffe.proto.DataType.prototype.clearBoolean = function() {
  return this.setBoolean(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.co.gaffe.proto.DataType.prototype.hasBoolean = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Byte byte = 4;
 * @return {?proto.co.gaffe.proto.DataType.Byte}
 */
proto.co.gaffe.proto.DataType.prototype.getByte = function() {
  return /** @type{?proto.co.gaffe.proto.DataType.Byte} */ (
    jspb.Message.getWrapperField(this, proto.co.gaffe.proto.DataType.Byte, 4));
};


/**
 * @param {?proto.co.gaffe.proto.DataType.Byte|undefined} value
 * @return {!proto.co.gaffe.proto.DataType} returns this
*/
proto.co.gaffe.proto.DataType.prototype.setByte = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.co.gaffe.proto.DataType.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.co.gaffe.proto.DataType} returns this
 */
proto.co.gaffe.proto.DataType.prototype.clearByte = function() {
  return this.setByte(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.co.gaffe.proto.DataType.prototype.hasByte = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional Short short = 5;
 * @return {?proto.co.gaffe.proto.DataType.Short}
 */
proto.co.gaffe.proto.DataType.prototype.getShort = function() {
  return /** @type{?proto.co.gaffe.proto.DataType.Short} */ (
    jspb.Message.getWrapperField(this, proto.co.gaffe.proto.DataType.Short, 5));
};


/**
 * @param {?proto.co.gaffe.proto.DataType.Short|undefined} value
 * @return {!proto.co.gaffe.proto.DataType} returns this
*/
proto.co.gaffe.proto.DataType.prototype.setShort = function(value) {
  return jspb.Message.setOneofWrapperField(this, 5, proto.co.gaffe.proto.DataType.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.co.gaffe.proto.DataType} returns this
 */
proto.co.gaffe.proto.DataType.prototype.clearShort = function() {
  return this.setShort(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.co.gaffe.proto.DataType.prototype.hasShort = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional Integer integer = 6;
 * @return {?proto.co.gaffe.proto.DataType.Integer}
 */
proto.co.gaffe.proto.DataType.prototype.getInteger = function() {
  return /** @type{?proto.co.gaffe.proto.DataType.Integer} */ (
    jspb.Message.getWrapperField(this, proto.co.gaffe.proto.DataType.Integer, 6));
};


/**
 * @param {?proto.co.gaffe.proto.DataType.Integer|undefined} value
 * @return {!proto.co.gaffe.proto.DataType} returns this
*/
proto.co.gaffe.proto.DataType.prototype.setInteger = function(value) {
  return jspb.Message.setOneofWrapperField(this, 6, proto.co.gaffe.proto.DataType.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.co.gaffe.proto.DataType} returns this
 */
proto.co.gaffe.proto.DataType.prototype.clearInteger = function() {
  return this.setInteger(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.co.gaffe.proto.DataType.prototype.hasInteger = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional Long long = 7;
 * @return {?proto.co.gaffe.proto.DataType.Long}
 */
proto.co.gaffe.proto.DataType.prototype.getLong = function() {
  return /** @type{?proto.co.gaffe.proto.DataType.Long} */ (
    jspb.Message.getWrapperField(this, proto.co.gaffe.proto.DataType.Long, 7));
};


/**
 * @param {?proto.co.gaffe.proto.DataType.Long|undefined} value
 * @return {!proto.co.gaffe.proto.DataType} returns this
*/
proto.co.gaffe.proto.DataType.prototype.setLong = function(value) {
  return jspb.Message.setOneofWrapperField(this, 7, proto.co.gaffe.proto.DataType.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.co.gaffe.proto.DataType} returns this
 */
proto.co.gaffe.proto.DataType.prototype.clearLong = function() {
  return this.setLong(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.co.gaffe.proto.DataType.prototype.hasLong = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional Float float = 8;
 * @return {?proto.co.gaffe.proto.DataType.Float}
 */
proto.co.gaffe.proto.DataType.prototype.getFloat = function() {
  return /** @type{?proto.co.gaffe.proto.DataType.Float} */ (
    jspb.Message.getWrapperField(this, proto.co.gaffe.proto.DataType.Float, 8));
};


/**
 * @param {?proto.co.gaffe.proto.DataType.Float|undefined} value
 * @return {!proto.co.gaffe.proto.DataType} returns this
*/
proto.co.gaffe.proto.DataType.prototype.setFloat = function(value) {
  return jspb.Message.setOneofWrapperField(this, 8, proto.co.gaffe.proto.DataType.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.co.gaffe.proto.DataType} returns this
 */
proto.co.gaffe.proto.DataType.prototype.clearFloat = function() {
  return this.setFloat(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.co.gaffe.proto.DataType.prototype.hasFloat = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional Double double = 9;
 * @return {?proto.co.gaffe.proto.DataType.Double}
 */
proto.co.gaffe.proto.DataType.prototype.getDouble = function() {
  return /** @type{?proto.co.gaffe.proto.DataType.Double} */ (
    jspb.Message.getWrapperField(this, proto.co.gaffe.proto.DataType.Double, 9));
};


/**
 * @param {?proto.co.gaffe.proto.DataType.Double|undefined} value
 * @return {!proto.co.gaffe.proto.DataType} returns this
*/
proto.co.gaffe.proto.DataType.prototype.setDouble = function(value) {
  return jspb.Message.setOneofWrapperField(this, 9, proto.co.gaffe.proto.DataType.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.co.gaffe.proto.DataType} returns this
 */
proto.co.gaffe.proto.DataType.prototype.clearDouble = function() {
  return this.setDouble(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.co.gaffe.proto.DataType.prototype.hasDouble = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional Decimal decimal = 10;
 * @return {?proto.co.gaffe.proto.DataType.Decimal}
 */
proto.co.gaffe.proto.DataType.prototype.getDecimal = function() {
  return /** @type{?proto.co.gaffe.proto.DataType.Decimal} */ (
    jspb.Message.getWrapperField(this, proto.co.gaffe.proto.DataType.Decimal, 10));
};


/**
 * @param {?proto.co.gaffe.proto.DataType.Decimal|undefined} value
 * @return {!proto.co.gaffe.proto.DataType} returns this
*/
proto.co.gaffe.proto.DataType.prototype.setDecimal = function(value) {
  return jspb.Message.setOneofWrapperField(this, 10, proto.co.gaffe.proto.DataType.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.co.gaffe.proto.DataType} returns this
 */
proto.co.gaffe.proto.DataType.prototype.clearDecimal = function() {
  return this.setDecimal(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.co.gaffe.proto.DataType.prototype.hasDecimal = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional String string = 11;
 * @return {?proto.co.gaffe.proto.DataType.String}
 */
proto.co.gaffe.proto.DataType.prototype.getString = function() {
  return /** @type{?proto.co.gaffe.proto.DataType.String} */ (
    jspb.Message.getWrapperField(this, proto.co.gaffe.proto.DataType.String, 11));
};


/**
 * @param {?proto.co.gaffe.proto.DataType.String|undefined} value
 * @return {!proto.co.gaffe.proto.DataType} returns this
*/
proto.co.gaffe.proto.DataType.prototype.setString = function(value) {
  return jspb.Message.setOneofWrapperField(this, 11, proto.co.gaffe.proto.DataType.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.co.gaffe.proto.DataType} returns this
 */
proto.co.gaffe.proto.DataType.prototype.clearString = function() {
  return this.setString(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.co.gaffe.proto.DataType.prototype.hasString = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional Char char = 12;
 * @return {?proto.co.gaffe.proto.DataType.Char}
 */
proto.co.gaffe.proto.DataType.prototype.getChar = function() {
  return /** @type{?proto.co.gaffe.proto.DataType.Char} */ (
    jspb.Message.getWrapperField(this, proto.co.gaffe.proto.DataType.Char, 12));
};


/**
 * @param {?proto.co.gaffe.proto.DataType.Char|undefined} value
 * @return {!proto.co.gaffe.proto.DataType} returns this
*/
proto.co.gaffe.proto.DataType.prototype.setChar = function(value) {
  return jspb.Message.setOneofWrapperField(this, 12, proto.co.gaffe.proto.DataType.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.co.gaffe.proto.DataType} returns this
 */
proto.co.gaffe.proto.DataType.prototype.clearChar = function() {
  return this.setChar(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.co.gaffe.proto.DataType.prototype.hasChar = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional VarChar var_char = 13;
 * @return {?proto.co.gaffe.proto.DataType.VarChar}
 */
proto.co.gaffe.proto.DataType.prototype.getVarChar = function() {
  return /** @type{?proto.co.gaffe.proto.DataType.VarChar} */ (
    jspb.Message.getWrapperField(this, proto.co.gaffe.proto.DataType.VarChar, 13));
};


/**
 * @param {?proto.co.gaffe.proto.DataType.VarChar|undefined} value
 * @return {!proto.co.gaffe.proto.DataType} returns this
*/
proto.co.gaffe.proto.DataType.prototype.setVarChar = function(value) {
  return jspb.Message.setOneofWrapperField(this, 13, proto.co.gaffe.proto.DataType.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.co.gaffe.proto.DataType} returns this
 */
proto.co.gaffe.proto.DataType.prototype.clearVarChar = function() {
  return this.setVarChar(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.co.gaffe.proto.DataType.prototype.hasVarChar = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional Date date = 14;
 * @return {?proto.co.gaffe.proto.DataType.Date}
 */
proto.co.gaffe.proto.DataType.prototype.getDate = function() {
  return /** @type{?proto.co.gaffe.proto.DataType.Date} */ (
    jspb.Message.getWrapperField(this, proto.co.gaffe.proto.DataType.Date, 14));
};


/**
 * @param {?proto.co.gaffe.proto.DataType.Date|undefined} value
 * @return {!proto.co.gaffe.proto.DataType} returns this
*/
proto.co.gaffe.proto.DataType.prototype.setDate = function(value) {
  return jspb.Message.setOneofWrapperField(this, 14, proto.co.gaffe.proto.DataType.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.co.gaffe.proto.DataType} returns this
 */
proto.co.gaffe.proto.DataType.prototype.clearDate = function() {
  return this.setDate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.co.gaffe.proto.DataType.prototype.hasDate = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * optional Timestamp timestamp = 15;
 * @return {?proto.co.gaffe.proto.DataType.Timestamp}
 */
proto.co.gaffe.proto.DataType.prototype.getTimestamp = function() {
  return /** @type{?proto.co.gaffe.proto.DataType.Timestamp} */ (
    jspb.Message.getWrapperField(this, proto.co.gaffe.proto.DataType.Timestamp, 15));
};


/**
 * @param {?proto.co.gaffe.proto.DataType.Timestamp|undefined} value
 * @return {!proto.co.gaffe.proto.DataType} returns this
*/
proto.co.gaffe.proto.DataType.prototype.setTimestamp = function(value) {
  return jspb.Message.setOneofWrapperField(this, 15, proto.co.gaffe.proto.DataType.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.co.gaffe.proto.DataType} returns this
 */
proto.co.gaffe.proto.DataType.prototype.clearTimestamp = function() {
  return this.setTimestamp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.co.gaffe.proto.DataType.prototype.hasTimestamp = function() {
  return jspb.Message.getField(this, 15) != null;
};


/**
 * optional TimestampNTZ timestamp_ntz = 16;
 * @return {?proto.co.gaffe.proto.DataType.TimestampNTZ}
 */
proto.co.gaffe.proto.DataType.prototype.getTimestampNtz = function() {
  return /** @type{?proto.co.gaffe.proto.DataType.TimestampNTZ} */ (
    jspb.Message.getWrapperField(this, proto.co.gaffe.proto.DataType.TimestampNTZ, 16));
};


/**
 * @param {?proto.co.gaffe.proto.DataType.TimestampNTZ|undefined} value
 * @return {!proto.co.gaffe.proto.DataType} returns this
*/
proto.co.gaffe.proto.DataType.prototype.setTimestampNtz = function(value) {
  return jspb.Message.setOneofWrapperField(this, 16, proto.co.gaffe.proto.DataType.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.co.gaffe.proto.DataType} returns this
 */
proto.co.gaffe.proto.DataType.prototype.clearTimestampNtz = function() {
  return this.setTimestampNtz(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.co.gaffe.proto.DataType.prototype.hasTimestampNtz = function() {
  return jspb.Message.getField(this, 16) != null;
};


/**
 * optional CalendarInterval calendar_interval = 17;
 * @return {?proto.co.gaffe.proto.DataType.CalendarInterval}
 */
proto.co.gaffe.proto.DataType.prototype.getCalendarInterval = function() {
  return /** @type{?proto.co.gaffe.proto.DataType.CalendarInterval} */ (
    jspb.Message.getWrapperField(this, proto.co.gaffe.proto.DataType.CalendarInterval, 17));
};


/**
 * @param {?proto.co.gaffe.proto.DataType.CalendarInterval|undefined} value
 * @return {!proto.co.gaffe.proto.DataType} returns this
*/
proto.co.gaffe.proto.DataType.prototype.setCalendarInterval = function(value) {
  return jspb.Message.setOneofWrapperField(this, 17, proto.co.gaffe.proto.DataType.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.co.gaffe.proto.DataType} returns this
 */
proto.co.gaffe.proto.DataType.prototype.clearCalendarInterval = function() {
  return this.setCalendarInterval(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.co.gaffe.proto.DataType.prototype.hasCalendarInterval = function() {
  return jspb.Message.getField(this, 17) != null;
};


/**
 * optional YearMonthInterval year_month_interval = 18;
 * @return {?proto.co.gaffe.proto.DataType.YearMonthInterval}
 */
proto.co.gaffe.proto.DataType.prototype.getYearMonthInterval = function() {
  return /** @type{?proto.co.gaffe.proto.DataType.YearMonthInterval} */ (
    jspb.Message.getWrapperField(this, proto.co.gaffe.proto.DataType.YearMonthInterval, 18));
};


/**
 * @param {?proto.co.gaffe.proto.DataType.YearMonthInterval|undefined} value
 * @return {!proto.co.gaffe.proto.DataType} returns this
*/
proto.co.gaffe.proto.DataType.prototype.setYearMonthInterval = function(value) {
  return jspb.Message.setOneofWrapperField(this, 18, proto.co.gaffe.proto.DataType.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.co.gaffe.proto.DataType} returns this
 */
proto.co.gaffe.proto.DataType.prototype.clearYearMonthInterval = function() {
  return this.setYearMonthInterval(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.co.gaffe.proto.DataType.prototype.hasYearMonthInterval = function() {
  return jspb.Message.getField(this, 18) != null;
};


/**
 * optional DayTimeInterval day_time_interval = 19;
 * @return {?proto.co.gaffe.proto.DataType.DayTimeInterval}
 */
proto.co.gaffe.proto.DataType.prototype.getDayTimeInterval = function() {
  return /** @type{?proto.co.gaffe.proto.DataType.DayTimeInterval} */ (
    jspb.Message.getWrapperField(this, proto.co.gaffe.proto.DataType.DayTimeInterval, 19));
};


/**
 * @param {?proto.co.gaffe.proto.DataType.DayTimeInterval|undefined} value
 * @return {!proto.co.gaffe.proto.DataType} returns this
*/
proto.co.gaffe.proto.DataType.prototype.setDayTimeInterval = function(value) {
  return jspb.Message.setOneofWrapperField(this, 19, proto.co.gaffe.proto.DataType.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.co.gaffe.proto.DataType} returns this
 */
proto.co.gaffe.proto.DataType.prototype.clearDayTimeInterval = function() {
  return this.setDayTimeInterval(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.co.gaffe.proto.DataType.prototype.hasDayTimeInterval = function() {
  return jspb.Message.getField(this, 19) != null;
};


/**
 * optional Array array = 20;
 * @return {?proto.co.gaffe.proto.DataType.Array}
 */
proto.co.gaffe.proto.DataType.prototype.getArray = function() {
  return /** @type{?proto.co.gaffe.proto.DataType.Array} */ (
    jspb.Message.getWrapperField(this, proto.co.gaffe.proto.DataType.Array, 20));
};


/**
 * @param {?proto.co.gaffe.proto.DataType.Array|undefined} value
 * @return {!proto.co.gaffe.proto.DataType} returns this
*/
proto.co.gaffe.proto.DataType.prototype.setArray = function(value) {
  return jspb.Message.setOneofWrapperField(this, 20, proto.co.gaffe.proto.DataType.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.co.gaffe.proto.DataType} returns this
 */
proto.co.gaffe.proto.DataType.prototype.clearArray = function() {
  return this.setArray(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.co.gaffe.proto.DataType.prototype.hasArray = function() {
  return jspb.Message.getField(this, 20) != null;
};


/**
 * optional Struct struct = 21;
 * @return {?proto.co.gaffe.proto.DataType.Struct}
 */
proto.co.gaffe.proto.DataType.prototype.getStruct = function() {
  return /** @type{?proto.co.gaffe.proto.DataType.Struct} */ (
    jspb.Message.getWrapperField(this, proto.co.gaffe.proto.DataType.Struct, 21));
};


/**
 * @param {?proto.co.gaffe.proto.DataType.Struct|undefined} value
 * @return {!proto.co.gaffe.proto.DataType} returns this
*/
proto.co.gaffe.proto.DataType.prototype.setStruct = function(value) {
  return jspb.Message.setOneofWrapperField(this, 21, proto.co.gaffe.proto.DataType.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.co.gaffe.proto.DataType} returns this
 */
proto.co.gaffe.proto.DataType.prototype.clearStruct = function() {
  return this.setStruct(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.co.gaffe.proto.DataType.prototype.hasStruct = function() {
  return jspb.Message.getField(this, 21) != null;
};


/**
 * optional Map map = 22;
 * @return {?proto.co.gaffe.proto.DataType.Map}
 */
proto.co.gaffe.proto.DataType.prototype.getMap = function() {
  return /** @type{?proto.co.gaffe.proto.DataType.Map} */ (
    jspb.Message.getWrapperField(this, proto.co.gaffe.proto.DataType.Map, 22));
};


/**
 * @param {?proto.co.gaffe.proto.DataType.Map|undefined} value
 * @return {!proto.co.gaffe.proto.DataType} returns this
*/
proto.co.gaffe.proto.DataType.prototype.setMap = function(value) {
  return jspb.Message.setOneofWrapperField(this, 22, proto.co.gaffe.proto.DataType.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.co.gaffe.proto.DataType} returns this
 */
proto.co.gaffe.proto.DataType.prototype.clearMap = function() {
  return this.setMap(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.co.gaffe.proto.DataType.prototype.hasMap = function() {
  return jspb.Message.getField(this, 22) != null;
};


/**
 * optional Variant variant = 25;
 * @return {?proto.co.gaffe.proto.DataType.Variant}
 */
proto.co.gaffe.proto.DataType.prototype.getVariant = function() {
  return /** @type{?proto.co.gaffe.proto.DataType.Variant} */ (
    jspb.Message.getWrapperField(this, proto.co.gaffe.proto.DataType.Variant, 25));
};


/**
 * @param {?proto.co.gaffe.proto.DataType.Variant|undefined} value
 * @return {!proto.co.gaffe.proto.DataType} returns this
*/
proto.co.gaffe.proto.DataType.prototype.setVariant = function(value) {
  return jspb.Message.setOneofWrapperField(this, 25, proto.co.gaffe.proto.DataType.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.co.gaffe.proto.DataType} returns this
 */
proto.co.gaffe.proto.DataType.prototype.clearVariant = function() {
  return this.setVariant(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.co.gaffe.proto.DataType.prototype.hasVariant = function() {
  return jspb.Message.getField(this, 25) != null;
};


/**
 * optional UDT udt = 23;
 * @return {?proto.co.gaffe.proto.DataType.UDT}
 */
proto.co.gaffe.proto.DataType.prototype.getUdt = function() {
  return /** @type{?proto.co.gaffe.proto.DataType.UDT} */ (
    jspb.Message.getWrapperField(this, proto.co.gaffe.proto.DataType.UDT, 23));
};


/**
 * @param {?proto.co.gaffe.proto.DataType.UDT|undefined} value
 * @return {!proto.co.gaffe.proto.DataType} returns this
*/
proto.co.gaffe.proto.DataType.prototype.setUdt = function(value) {
  return jspb.Message.setOneofWrapperField(this, 23, proto.co.gaffe.proto.DataType.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.co.gaffe.proto.DataType} returns this
 */
proto.co.gaffe.proto.DataType.prototype.clearUdt = function() {
  return this.setUdt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.co.gaffe.proto.DataType.prototype.hasUdt = function() {
  return jspb.Message.getField(this, 23) != null;
};


/**
 * optional Unparsed unparsed = 24;
 * @return {?proto.co.gaffe.proto.DataType.Unparsed}
 */
proto.co.gaffe.proto.DataType.prototype.getUnparsed = function() {
  return /** @type{?proto.co.gaffe.proto.DataType.Unparsed} */ (
    jspb.Message.getWrapperField(this, proto.co.gaffe.proto.DataType.Unparsed, 24));
};


/**
 * @param {?proto.co.gaffe.proto.DataType.Unparsed|undefined} value
 * @return {!proto.co.gaffe.proto.DataType} returns this
*/
proto.co.gaffe.proto.DataType.prototype.setUnparsed = function(value) {
  return jspb.Message.setOneofWrapperField(this, 24, proto.co.gaffe.proto.DataType.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.co.gaffe.proto.DataType} returns this
 */
proto.co.gaffe.proto.DataType.prototype.clearUnparsed = function() {
  return this.setUnparsed(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.co.gaffe.proto.DataType.prototype.hasUnparsed = function() {
  return jspb.Message.getField(this, 24) != null;
};


goog.object.extend(exports, proto.co.gaffe.proto);
