// source: literal.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

var google_protobuf_any_pb = require('google-protobuf/google/protobuf/any_pb.js');
goog.object.extend(proto, google_protobuf_any_pb);
var types_pb = require('./types_pb.js');
goog.object.extend(proto, types_pb);
goog.exportSymbol('proto.co.gaffe.proto.Literal', null, global);
goog.exportSymbol('proto.co.gaffe.proto.Literal.Array', null, global);
goog.exportSymbol('proto.co.gaffe.proto.Literal.CalendarInterval', null, global);
goog.exportSymbol('proto.co.gaffe.proto.Literal.Decimal', null, global);
goog.exportSymbol('proto.co.gaffe.proto.Literal.LiteralTypeCase', null, global);
goog.exportSymbol('proto.co.gaffe.proto.Literal.Map', null, global);
goog.exportSymbol('proto.co.gaffe.proto.Literal.Struct', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.co.gaffe.proto.Literal = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.co.gaffe.proto.Literal.oneofGroups_);
};
goog.inherits(proto.co.gaffe.proto.Literal, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.co.gaffe.proto.Literal.displayName = 'proto.co.gaffe.proto.Literal';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.co.gaffe.proto.Literal.Decimal = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.co.gaffe.proto.Literal.Decimal, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.co.gaffe.proto.Literal.Decimal.displayName = 'proto.co.gaffe.proto.Literal.Decimal';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.co.gaffe.proto.Literal.CalendarInterval = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.co.gaffe.proto.Literal.CalendarInterval, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.co.gaffe.proto.Literal.CalendarInterval.displayName = 'proto.co.gaffe.proto.Literal.CalendarInterval';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.co.gaffe.proto.Literal.Array = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.co.gaffe.proto.Literal.Array.repeatedFields_, null);
};
goog.inherits(proto.co.gaffe.proto.Literal.Array, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.co.gaffe.proto.Literal.Array.displayName = 'proto.co.gaffe.proto.Literal.Array';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.co.gaffe.proto.Literal.Map = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.co.gaffe.proto.Literal.Map.repeatedFields_, null);
};
goog.inherits(proto.co.gaffe.proto.Literal.Map, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.co.gaffe.proto.Literal.Map.displayName = 'proto.co.gaffe.proto.Literal.Map';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.co.gaffe.proto.Literal.Struct = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.co.gaffe.proto.Literal.Struct.repeatedFields_, null);
};
goog.inherits(proto.co.gaffe.proto.Literal.Struct, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.co.gaffe.proto.Literal.Struct.displayName = 'proto.co.gaffe.proto.Literal.Struct';
}

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.co.gaffe.proto.Literal.oneofGroups_ = [[1,2,3,4,5,6,7,10,11,12,13,16,17,18,19,20,21,22,23,24]];

/**
 * @enum {number}
 */
proto.co.gaffe.proto.Literal.LiteralTypeCase = {
  LITERAL_TYPE_NOT_SET: 0,
  NULL: 1,
  BINARY: 2,
  BOOLEAN: 3,
  BYTE: 4,
  SHORT: 5,
  INTEGER: 6,
  LONG: 7,
  FLOAT: 10,
  DOUBLE: 11,
  DECIMAL: 12,
  STRING: 13,
  DATE: 16,
  TIMESTAMP: 17,
  TIMESTAMP_NTZ: 18,
  CALENDAR_INTERVAL: 19,
  YEAR_MONTH_INTERVAL: 20,
  DAY_TIME_INTERVAL: 21,
  ARRAY: 22,
  MAP: 23,
  STRUCT: 24
};

/**
 * @return {proto.co.gaffe.proto.Literal.LiteralTypeCase}
 */
proto.co.gaffe.proto.Literal.prototype.getLiteralTypeCase = function() {
  return /** @type {proto.co.gaffe.proto.Literal.LiteralTypeCase} */(jspb.Message.computeOneofCase(this, proto.co.gaffe.proto.Literal.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.co.gaffe.proto.Literal.prototype.toObject = function(opt_includeInstance) {
  return proto.co.gaffe.proto.Literal.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.co.gaffe.proto.Literal} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.co.gaffe.proto.Literal.toObject = function(includeInstance, msg) {
  var f, obj = {
    pb_null: (f = msg.getNull()) && types_pb.DataType.toObject(includeInstance, f),
    binary: msg.getBinary_asB64(),
    pb_boolean: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
    pb_byte: jspb.Message.getFieldWithDefault(msg, 4, 0),
    pb_short: jspb.Message.getFieldWithDefault(msg, 5, 0),
    integer: jspb.Message.getFieldWithDefault(msg, 6, 0),
    pb_long: jspb.Message.getFieldWithDefault(msg, 7, 0),
    pb_float: jspb.Message.getFloatingPointFieldWithDefault(msg, 10, 0.0),
    pb_double: jspb.Message.getFloatingPointFieldWithDefault(msg, 11, 0.0),
    decimal: (f = msg.getDecimal()) && proto.co.gaffe.proto.Literal.Decimal.toObject(includeInstance, f),
    string: jspb.Message.getFieldWithDefault(msg, 13, ""),
    date: jspb.Message.getFieldWithDefault(msg, 16, 0),
    timestamp: jspb.Message.getFieldWithDefault(msg, 17, 0),
    timestampNtz: jspb.Message.getFieldWithDefault(msg, 18, 0),
    calendarInterval: (f = msg.getCalendarInterval()) && proto.co.gaffe.proto.Literal.CalendarInterval.toObject(includeInstance, f),
    yearMonthInterval: jspb.Message.getFieldWithDefault(msg, 20, 0),
    dayTimeInterval: jspb.Message.getFieldWithDefault(msg, 21, 0),
    array: (f = msg.getArray()) && proto.co.gaffe.proto.Literal.Array.toObject(includeInstance, f),
    map: (f = msg.getMap()) && proto.co.gaffe.proto.Literal.Map.toObject(includeInstance, f),
    struct: (f = msg.getStruct()) && proto.co.gaffe.proto.Literal.Struct.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.co.gaffe.proto.Literal}
 */
proto.co.gaffe.proto.Literal.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.co.gaffe.proto.Literal;
  return proto.co.gaffe.proto.Literal.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.co.gaffe.proto.Literal} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.co.gaffe.proto.Literal}
 */
proto.co.gaffe.proto.Literal.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new types_pb.DataType;
      reader.readMessage(value,types_pb.DataType.deserializeBinaryFromReader);
      msg.setNull(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBinary(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBoolean(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setByte(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setShort(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setInteger(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setLong(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setFloat(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setDouble(value);
      break;
    case 12:
      var value = new proto.co.gaffe.proto.Literal.Decimal;
      reader.readMessage(value,proto.co.gaffe.proto.Literal.Decimal.deserializeBinaryFromReader);
      msg.setDecimal(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.setString(value);
      break;
    case 16:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDate(value);
      break;
    case 17:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTimestamp(value);
      break;
    case 18:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTimestampNtz(value);
      break;
    case 19:
      var value = new proto.co.gaffe.proto.Literal.CalendarInterval;
      reader.readMessage(value,proto.co.gaffe.proto.Literal.CalendarInterval.deserializeBinaryFromReader);
      msg.setCalendarInterval(value);
      break;
    case 20:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setYearMonthInterval(value);
      break;
    case 21:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setDayTimeInterval(value);
      break;
    case 22:
      var value = new proto.co.gaffe.proto.Literal.Array;
      reader.readMessage(value,proto.co.gaffe.proto.Literal.Array.deserializeBinaryFromReader);
      msg.setArray(value);
      break;
    case 23:
      var value = new proto.co.gaffe.proto.Literal.Map;
      reader.readMessage(value,proto.co.gaffe.proto.Literal.Map.deserializeBinaryFromReader);
      msg.setMap(value);
      break;
    case 24:
      var value = new proto.co.gaffe.proto.Literal.Struct;
      reader.readMessage(value,proto.co.gaffe.proto.Literal.Struct.deserializeBinaryFromReader);
      msg.setStruct(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.co.gaffe.proto.Literal.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.co.gaffe.proto.Literal.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.co.gaffe.proto.Literal} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.co.gaffe.proto.Literal.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNull();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      types_pb.DataType.serializeBinaryToWriter
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeBool(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeInt64(
      7,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeFloat(
      10,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 11));
  if (f != null) {
    writer.writeDouble(
      11,
      f
    );
  }
  f = message.getDecimal();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      proto.co.gaffe.proto.Literal.Decimal.serializeBinaryToWriter
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 13));
  if (f != null) {
    writer.writeString(
      13,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 16));
  if (f != null) {
    writer.writeInt32(
      16,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 17));
  if (f != null) {
    writer.writeInt64(
      17,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 18));
  if (f != null) {
    writer.writeInt64(
      18,
      f
    );
  }
  f = message.getCalendarInterval();
  if (f != null) {
    writer.writeMessage(
      19,
      f,
      proto.co.gaffe.proto.Literal.CalendarInterval.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 20));
  if (f != null) {
    writer.writeInt32(
      20,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 21));
  if (f != null) {
    writer.writeInt64(
      21,
      f
    );
  }
  f = message.getArray();
  if (f != null) {
    writer.writeMessage(
      22,
      f,
      proto.co.gaffe.proto.Literal.Array.serializeBinaryToWriter
    );
  }
  f = message.getMap();
  if (f != null) {
    writer.writeMessage(
      23,
      f,
      proto.co.gaffe.proto.Literal.Map.serializeBinaryToWriter
    );
  }
  f = message.getStruct();
  if (f != null) {
    writer.writeMessage(
      24,
      f,
      proto.co.gaffe.proto.Literal.Struct.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.co.gaffe.proto.Literal.Decimal.prototype.toObject = function(opt_includeInstance) {
  return proto.co.gaffe.proto.Literal.Decimal.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.co.gaffe.proto.Literal.Decimal} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.co.gaffe.proto.Literal.Decimal.toObject = function(includeInstance, msg) {
  var f, obj = {
    value: jspb.Message.getFieldWithDefault(msg, 1, ""),
    precision: jspb.Message.getFieldWithDefault(msg, 2, 0),
    scale: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.co.gaffe.proto.Literal.Decimal}
 */
proto.co.gaffe.proto.Literal.Decimal.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.co.gaffe.proto.Literal.Decimal;
  return proto.co.gaffe.proto.Literal.Decimal.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.co.gaffe.proto.Literal.Decimal} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.co.gaffe.proto.Literal.Decimal}
 */
proto.co.gaffe.proto.Literal.Decimal.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setValue(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPrecision(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setScale(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.co.gaffe.proto.Literal.Decimal.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.co.gaffe.proto.Literal.Decimal.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.co.gaffe.proto.Literal.Decimal} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.co.gaffe.proto.Literal.Decimal.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValue();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * optional string value = 1;
 * @return {string}
 */
proto.co.gaffe.proto.Literal.Decimal.prototype.getValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.co.gaffe.proto.Literal.Decimal} returns this
 */
proto.co.gaffe.proto.Literal.Decimal.prototype.setValue = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 precision = 2;
 * @return {number}
 */
proto.co.gaffe.proto.Literal.Decimal.prototype.getPrecision = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.co.gaffe.proto.Literal.Decimal} returns this
 */
proto.co.gaffe.proto.Literal.Decimal.prototype.setPrecision = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.co.gaffe.proto.Literal.Decimal} returns this
 */
proto.co.gaffe.proto.Literal.Decimal.prototype.clearPrecision = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.co.gaffe.proto.Literal.Decimal.prototype.hasPrecision = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int32 scale = 3;
 * @return {number}
 */
proto.co.gaffe.proto.Literal.Decimal.prototype.getScale = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.co.gaffe.proto.Literal.Decimal} returns this
 */
proto.co.gaffe.proto.Literal.Decimal.prototype.setScale = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.co.gaffe.proto.Literal.Decimal} returns this
 */
proto.co.gaffe.proto.Literal.Decimal.prototype.clearScale = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.co.gaffe.proto.Literal.Decimal.prototype.hasScale = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.co.gaffe.proto.Literal.CalendarInterval.prototype.toObject = function(opt_includeInstance) {
  return proto.co.gaffe.proto.Literal.CalendarInterval.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.co.gaffe.proto.Literal.CalendarInterval} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.co.gaffe.proto.Literal.CalendarInterval.toObject = function(includeInstance, msg) {
  var f, obj = {
    months: jspb.Message.getFieldWithDefault(msg, 1, 0),
    days: jspb.Message.getFieldWithDefault(msg, 2, 0),
    microseconds: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.co.gaffe.proto.Literal.CalendarInterval}
 */
proto.co.gaffe.proto.Literal.CalendarInterval.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.co.gaffe.proto.Literal.CalendarInterval;
  return proto.co.gaffe.proto.Literal.CalendarInterval.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.co.gaffe.proto.Literal.CalendarInterval} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.co.gaffe.proto.Literal.CalendarInterval}
 */
proto.co.gaffe.proto.Literal.CalendarInterval.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMonths(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDays(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setMicroseconds(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.co.gaffe.proto.Literal.CalendarInterval.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.co.gaffe.proto.Literal.CalendarInterval.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.co.gaffe.proto.Literal.CalendarInterval} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.co.gaffe.proto.Literal.CalendarInterval.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMonths();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getDays();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getMicroseconds();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
};


/**
 * optional int32 months = 1;
 * @return {number}
 */
proto.co.gaffe.proto.Literal.CalendarInterval.prototype.getMonths = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.co.gaffe.proto.Literal.CalendarInterval} returns this
 */
proto.co.gaffe.proto.Literal.CalendarInterval.prototype.setMonths = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 days = 2;
 * @return {number}
 */
proto.co.gaffe.proto.Literal.CalendarInterval.prototype.getDays = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.co.gaffe.proto.Literal.CalendarInterval} returns this
 */
proto.co.gaffe.proto.Literal.CalendarInterval.prototype.setDays = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int64 microseconds = 3;
 * @return {number}
 */
proto.co.gaffe.proto.Literal.CalendarInterval.prototype.getMicroseconds = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.co.gaffe.proto.Literal.CalendarInterval} returns this
 */
proto.co.gaffe.proto.Literal.CalendarInterval.prototype.setMicroseconds = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.co.gaffe.proto.Literal.Array.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.co.gaffe.proto.Literal.Array.prototype.toObject = function(opt_includeInstance) {
  return proto.co.gaffe.proto.Literal.Array.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.co.gaffe.proto.Literal.Array} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.co.gaffe.proto.Literal.Array.toObject = function(includeInstance, msg) {
  var f, obj = {
    elementType: (f = msg.getElementType()) && types_pb.DataType.toObject(includeInstance, f),
    elementsList: jspb.Message.toObjectList(msg.getElementsList(),
    proto.co.gaffe.proto.Literal.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.co.gaffe.proto.Literal.Array}
 */
proto.co.gaffe.proto.Literal.Array.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.co.gaffe.proto.Literal.Array;
  return proto.co.gaffe.proto.Literal.Array.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.co.gaffe.proto.Literal.Array} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.co.gaffe.proto.Literal.Array}
 */
proto.co.gaffe.proto.Literal.Array.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new types_pb.DataType;
      reader.readMessage(value,types_pb.DataType.deserializeBinaryFromReader);
      msg.setElementType(value);
      break;
    case 2:
      var value = new proto.co.gaffe.proto.Literal;
      reader.readMessage(value,proto.co.gaffe.proto.Literal.deserializeBinaryFromReader);
      msg.addElements(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.co.gaffe.proto.Literal.Array.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.co.gaffe.proto.Literal.Array.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.co.gaffe.proto.Literal.Array} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.co.gaffe.proto.Literal.Array.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getElementType();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      types_pb.DataType.serializeBinaryToWriter
    );
  }
  f = message.getElementsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.co.gaffe.proto.Literal.serializeBinaryToWriter
    );
  }
};


/**
 * optional DataType element_type = 1;
 * @return {?proto.co.gaffe.proto.DataType}
 */
proto.co.gaffe.proto.Literal.Array.prototype.getElementType = function() {
  return /** @type{?proto.co.gaffe.proto.DataType} */ (
    jspb.Message.getWrapperField(this, types_pb.DataType, 1));
};


/**
 * @param {?proto.co.gaffe.proto.DataType|undefined} value
 * @return {!proto.co.gaffe.proto.Literal.Array} returns this
*/
proto.co.gaffe.proto.Literal.Array.prototype.setElementType = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.co.gaffe.proto.Literal.Array} returns this
 */
proto.co.gaffe.proto.Literal.Array.prototype.clearElementType = function() {
  return this.setElementType(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.co.gaffe.proto.Literal.Array.prototype.hasElementType = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated Literal elements = 2;
 * @return {!Array<!proto.co.gaffe.proto.Literal>}
 */
proto.co.gaffe.proto.Literal.Array.prototype.getElementsList = function() {
  return /** @type{!Array<!proto.co.gaffe.proto.Literal>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.co.gaffe.proto.Literal, 2));
};


/**
 * @param {!Array<!proto.co.gaffe.proto.Literal>} value
 * @return {!proto.co.gaffe.proto.Literal.Array} returns this
*/
proto.co.gaffe.proto.Literal.Array.prototype.setElementsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.co.gaffe.proto.Literal=} opt_value
 * @param {number=} opt_index
 * @return {!proto.co.gaffe.proto.Literal}
 */
proto.co.gaffe.proto.Literal.Array.prototype.addElements = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.co.gaffe.proto.Literal, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.co.gaffe.proto.Literal.Array} returns this
 */
proto.co.gaffe.proto.Literal.Array.prototype.clearElementsList = function() {
  return this.setElementsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.co.gaffe.proto.Literal.Map.repeatedFields_ = [3,4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.co.gaffe.proto.Literal.Map.prototype.toObject = function(opt_includeInstance) {
  return proto.co.gaffe.proto.Literal.Map.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.co.gaffe.proto.Literal.Map} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.co.gaffe.proto.Literal.Map.toObject = function(includeInstance, msg) {
  var f, obj = {
    keyType: (f = msg.getKeyType()) && types_pb.DataType.toObject(includeInstance, f),
    valueType: (f = msg.getValueType()) && types_pb.DataType.toObject(includeInstance, f),
    keysList: jspb.Message.toObjectList(msg.getKeysList(),
    proto.co.gaffe.proto.Literal.toObject, includeInstance),
    valuesList: jspb.Message.toObjectList(msg.getValuesList(),
    proto.co.gaffe.proto.Literal.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.co.gaffe.proto.Literal.Map}
 */
proto.co.gaffe.proto.Literal.Map.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.co.gaffe.proto.Literal.Map;
  return proto.co.gaffe.proto.Literal.Map.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.co.gaffe.proto.Literal.Map} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.co.gaffe.proto.Literal.Map}
 */
proto.co.gaffe.proto.Literal.Map.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new types_pb.DataType;
      reader.readMessage(value,types_pb.DataType.deserializeBinaryFromReader);
      msg.setKeyType(value);
      break;
    case 2:
      var value = new types_pb.DataType;
      reader.readMessage(value,types_pb.DataType.deserializeBinaryFromReader);
      msg.setValueType(value);
      break;
    case 3:
      var value = new proto.co.gaffe.proto.Literal;
      reader.readMessage(value,proto.co.gaffe.proto.Literal.deserializeBinaryFromReader);
      msg.addKeys(value);
      break;
    case 4:
      var value = new proto.co.gaffe.proto.Literal;
      reader.readMessage(value,proto.co.gaffe.proto.Literal.deserializeBinaryFromReader);
      msg.addValues(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.co.gaffe.proto.Literal.Map.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.co.gaffe.proto.Literal.Map.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.co.gaffe.proto.Literal.Map} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.co.gaffe.proto.Literal.Map.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKeyType();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      types_pb.DataType.serializeBinaryToWriter
    );
  }
  f = message.getValueType();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      types_pb.DataType.serializeBinaryToWriter
    );
  }
  f = message.getKeysList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.co.gaffe.proto.Literal.serializeBinaryToWriter
    );
  }
  f = message.getValuesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.co.gaffe.proto.Literal.serializeBinaryToWriter
    );
  }
};


/**
 * optional DataType key_type = 1;
 * @return {?proto.co.gaffe.proto.DataType}
 */
proto.co.gaffe.proto.Literal.Map.prototype.getKeyType = function() {
  return /** @type{?proto.co.gaffe.proto.DataType} */ (
    jspb.Message.getWrapperField(this, types_pb.DataType, 1));
};


/**
 * @param {?proto.co.gaffe.proto.DataType|undefined} value
 * @return {!proto.co.gaffe.proto.Literal.Map} returns this
*/
proto.co.gaffe.proto.Literal.Map.prototype.setKeyType = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.co.gaffe.proto.Literal.Map} returns this
 */
proto.co.gaffe.proto.Literal.Map.prototype.clearKeyType = function() {
  return this.setKeyType(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.co.gaffe.proto.Literal.Map.prototype.hasKeyType = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional DataType value_type = 2;
 * @return {?proto.co.gaffe.proto.DataType}
 */
proto.co.gaffe.proto.Literal.Map.prototype.getValueType = function() {
  return /** @type{?proto.co.gaffe.proto.DataType} */ (
    jspb.Message.getWrapperField(this, types_pb.DataType, 2));
};


/**
 * @param {?proto.co.gaffe.proto.DataType|undefined} value
 * @return {!proto.co.gaffe.proto.Literal.Map} returns this
*/
proto.co.gaffe.proto.Literal.Map.prototype.setValueType = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.co.gaffe.proto.Literal.Map} returns this
 */
proto.co.gaffe.proto.Literal.Map.prototype.clearValueType = function() {
  return this.setValueType(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.co.gaffe.proto.Literal.Map.prototype.hasValueType = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated Literal keys = 3;
 * @return {!Array<!proto.co.gaffe.proto.Literal>}
 */
proto.co.gaffe.proto.Literal.Map.prototype.getKeysList = function() {
  return /** @type{!Array<!proto.co.gaffe.proto.Literal>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.co.gaffe.proto.Literal, 3));
};


/**
 * @param {!Array<!proto.co.gaffe.proto.Literal>} value
 * @return {!proto.co.gaffe.proto.Literal.Map} returns this
*/
proto.co.gaffe.proto.Literal.Map.prototype.setKeysList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.co.gaffe.proto.Literal=} opt_value
 * @param {number=} opt_index
 * @return {!proto.co.gaffe.proto.Literal}
 */
proto.co.gaffe.proto.Literal.Map.prototype.addKeys = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.co.gaffe.proto.Literal, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.co.gaffe.proto.Literal.Map} returns this
 */
proto.co.gaffe.proto.Literal.Map.prototype.clearKeysList = function() {
  return this.setKeysList([]);
};


/**
 * repeated Literal values = 4;
 * @return {!Array<!proto.co.gaffe.proto.Literal>}
 */
proto.co.gaffe.proto.Literal.Map.prototype.getValuesList = function() {
  return /** @type{!Array<!proto.co.gaffe.proto.Literal>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.co.gaffe.proto.Literal, 4));
};


/**
 * @param {!Array<!proto.co.gaffe.proto.Literal>} value
 * @return {!proto.co.gaffe.proto.Literal.Map} returns this
*/
proto.co.gaffe.proto.Literal.Map.prototype.setValuesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.co.gaffe.proto.Literal=} opt_value
 * @param {number=} opt_index
 * @return {!proto.co.gaffe.proto.Literal}
 */
proto.co.gaffe.proto.Literal.Map.prototype.addValues = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.co.gaffe.proto.Literal, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.co.gaffe.proto.Literal.Map} returns this
 */
proto.co.gaffe.proto.Literal.Map.prototype.clearValuesList = function() {
  return this.setValuesList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.co.gaffe.proto.Literal.Struct.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.co.gaffe.proto.Literal.Struct.prototype.toObject = function(opt_includeInstance) {
  return proto.co.gaffe.proto.Literal.Struct.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.co.gaffe.proto.Literal.Struct} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.co.gaffe.proto.Literal.Struct.toObject = function(includeInstance, msg) {
  var f, obj = {
    structType: (f = msg.getStructType()) && types_pb.DataType.toObject(includeInstance, f),
    elementsList: jspb.Message.toObjectList(msg.getElementsList(),
    proto.co.gaffe.proto.Literal.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.co.gaffe.proto.Literal.Struct}
 */
proto.co.gaffe.proto.Literal.Struct.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.co.gaffe.proto.Literal.Struct;
  return proto.co.gaffe.proto.Literal.Struct.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.co.gaffe.proto.Literal.Struct} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.co.gaffe.proto.Literal.Struct}
 */
proto.co.gaffe.proto.Literal.Struct.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new types_pb.DataType;
      reader.readMessage(value,types_pb.DataType.deserializeBinaryFromReader);
      msg.setStructType(value);
      break;
    case 2:
      var value = new proto.co.gaffe.proto.Literal;
      reader.readMessage(value,proto.co.gaffe.proto.Literal.deserializeBinaryFromReader);
      msg.addElements(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.co.gaffe.proto.Literal.Struct.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.co.gaffe.proto.Literal.Struct.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.co.gaffe.proto.Literal.Struct} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.co.gaffe.proto.Literal.Struct.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStructType();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      types_pb.DataType.serializeBinaryToWriter
    );
  }
  f = message.getElementsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.co.gaffe.proto.Literal.serializeBinaryToWriter
    );
  }
};


/**
 * optional DataType struct_type = 1;
 * @return {?proto.co.gaffe.proto.DataType}
 */
proto.co.gaffe.proto.Literal.Struct.prototype.getStructType = function() {
  return /** @type{?proto.co.gaffe.proto.DataType} */ (
    jspb.Message.getWrapperField(this, types_pb.DataType, 1));
};


/**
 * @param {?proto.co.gaffe.proto.DataType|undefined} value
 * @return {!proto.co.gaffe.proto.Literal.Struct} returns this
*/
proto.co.gaffe.proto.Literal.Struct.prototype.setStructType = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.co.gaffe.proto.Literal.Struct} returns this
 */
proto.co.gaffe.proto.Literal.Struct.prototype.clearStructType = function() {
  return this.setStructType(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.co.gaffe.proto.Literal.Struct.prototype.hasStructType = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated Literal elements = 2;
 * @return {!Array<!proto.co.gaffe.proto.Literal>}
 */
proto.co.gaffe.proto.Literal.Struct.prototype.getElementsList = function() {
  return /** @type{!Array<!proto.co.gaffe.proto.Literal>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.co.gaffe.proto.Literal, 2));
};


/**
 * @param {!Array<!proto.co.gaffe.proto.Literal>} value
 * @return {!proto.co.gaffe.proto.Literal.Struct} returns this
*/
proto.co.gaffe.proto.Literal.Struct.prototype.setElementsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.co.gaffe.proto.Literal=} opt_value
 * @param {number=} opt_index
 * @return {!proto.co.gaffe.proto.Literal}
 */
proto.co.gaffe.proto.Literal.Struct.prototype.addElements = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.co.gaffe.proto.Literal, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.co.gaffe.proto.Literal.Struct} returns this
 */
proto.co.gaffe.proto.Literal.Struct.prototype.clearElementsList = function() {
  return this.setElementsList([]);
};


/**
 * optional DataType null = 1;
 * @return {?proto.co.gaffe.proto.DataType}
 */
proto.co.gaffe.proto.Literal.prototype.getNull = function() {
  return /** @type{?proto.co.gaffe.proto.DataType} */ (
    jspb.Message.getWrapperField(this, types_pb.DataType, 1));
};


/**
 * @param {?proto.co.gaffe.proto.DataType|undefined} value
 * @return {!proto.co.gaffe.proto.Literal} returns this
*/
proto.co.gaffe.proto.Literal.prototype.setNull = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.co.gaffe.proto.Literal.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.co.gaffe.proto.Literal} returns this
 */
proto.co.gaffe.proto.Literal.prototype.clearNull = function() {
  return this.setNull(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.co.gaffe.proto.Literal.prototype.hasNull = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bytes binary = 2;
 * @return {!(string|Uint8Array)}
 */
proto.co.gaffe.proto.Literal.prototype.getBinary = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes binary = 2;
 * This is a type-conversion wrapper around `getBinary()`
 * @return {string}
 */
proto.co.gaffe.proto.Literal.prototype.getBinary_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBinary()));
};


/**
 * optional bytes binary = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBinary()`
 * @return {!Uint8Array}
 */
proto.co.gaffe.proto.Literal.prototype.getBinary_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBinary()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.co.gaffe.proto.Literal} returns this
 */
proto.co.gaffe.proto.Literal.prototype.setBinary = function(value) {
  return jspb.Message.setOneofField(this, 2, proto.co.gaffe.proto.Literal.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.co.gaffe.proto.Literal} returns this
 */
proto.co.gaffe.proto.Literal.prototype.clearBinary = function() {
  return jspb.Message.setOneofField(this, 2, proto.co.gaffe.proto.Literal.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.co.gaffe.proto.Literal.prototype.hasBinary = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bool boolean = 3;
 * @return {boolean}
 */
proto.co.gaffe.proto.Literal.prototype.getBoolean = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.co.gaffe.proto.Literal} returns this
 */
proto.co.gaffe.proto.Literal.prototype.setBoolean = function(value) {
  return jspb.Message.setOneofField(this, 3, proto.co.gaffe.proto.Literal.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.co.gaffe.proto.Literal} returns this
 */
proto.co.gaffe.proto.Literal.prototype.clearBoolean = function() {
  return jspb.Message.setOneofField(this, 3, proto.co.gaffe.proto.Literal.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.co.gaffe.proto.Literal.prototype.hasBoolean = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional int32 byte = 4;
 * @return {number}
 */
proto.co.gaffe.proto.Literal.prototype.getByte = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.co.gaffe.proto.Literal} returns this
 */
proto.co.gaffe.proto.Literal.prototype.setByte = function(value) {
  return jspb.Message.setOneofField(this, 4, proto.co.gaffe.proto.Literal.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.co.gaffe.proto.Literal} returns this
 */
proto.co.gaffe.proto.Literal.prototype.clearByte = function() {
  return jspb.Message.setOneofField(this, 4, proto.co.gaffe.proto.Literal.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.co.gaffe.proto.Literal.prototype.hasByte = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional int32 short = 5;
 * @return {number}
 */
proto.co.gaffe.proto.Literal.prototype.getShort = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.co.gaffe.proto.Literal} returns this
 */
proto.co.gaffe.proto.Literal.prototype.setShort = function(value) {
  return jspb.Message.setOneofField(this, 5, proto.co.gaffe.proto.Literal.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.co.gaffe.proto.Literal} returns this
 */
proto.co.gaffe.proto.Literal.prototype.clearShort = function() {
  return jspb.Message.setOneofField(this, 5, proto.co.gaffe.proto.Literal.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.co.gaffe.proto.Literal.prototype.hasShort = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional int32 integer = 6;
 * @return {number}
 */
proto.co.gaffe.proto.Literal.prototype.getInteger = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.co.gaffe.proto.Literal} returns this
 */
proto.co.gaffe.proto.Literal.prototype.setInteger = function(value) {
  return jspb.Message.setOneofField(this, 6, proto.co.gaffe.proto.Literal.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.co.gaffe.proto.Literal} returns this
 */
proto.co.gaffe.proto.Literal.prototype.clearInteger = function() {
  return jspb.Message.setOneofField(this, 6, proto.co.gaffe.proto.Literal.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.co.gaffe.proto.Literal.prototype.hasInteger = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional int64 long = 7;
 * @return {number}
 */
proto.co.gaffe.proto.Literal.prototype.getLong = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.co.gaffe.proto.Literal} returns this
 */
proto.co.gaffe.proto.Literal.prototype.setLong = function(value) {
  return jspb.Message.setOneofField(this, 7, proto.co.gaffe.proto.Literal.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.co.gaffe.proto.Literal} returns this
 */
proto.co.gaffe.proto.Literal.prototype.clearLong = function() {
  return jspb.Message.setOneofField(this, 7, proto.co.gaffe.proto.Literal.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.co.gaffe.proto.Literal.prototype.hasLong = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional float float = 10;
 * @return {number}
 */
proto.co.gaffe.proto.Literal.prototype.getFloat = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 10, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.co.gaffe.proto.Literal} returns this
 */
proto.co.gaffe.proto.Literal.prototype.setFloat = function(value) {
  return jspb.Message.setOneofField(this, 10, proto.co.gaffe.proto.Literal.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.co.gaffe.proto.Literal} returns this
 */
proto.co.gaffe.proto.Literal.prototype.clearFloat = function() {
  return jspb.Message.setOneofField(this, 10, proto.co.gaffe.proto.Literal.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.co.gaffe.proto.Literal.prototype.hasFloat = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional double double = 11;
 * @return {number}
 */
proto.co.gaffe.proto.Literal.prototype.getDouble = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 11, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.co.gaffe.proto.Literal} returns this
 */
proto.co.gaffe.proto.Literal.prototype.setDouble = function(value) {
  return jspb.Message.setOneofField(this, 11, proto.co.gaffe.proto.Literal.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.co.gaffe.proto.Literal} returns this
 */
proto.co.gaffe.proto.Literal.prototype.clearDouble = function() {
  return jspb.Message.setOneofField(this, 11, proto.co.gaffe.proto.Literal.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.co.gaffe.proto.Literal.prototype.hasDouble = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional Decimal decimal = 12;
 * @return {?proto.co.gaffe.proto.Literal.Decimal}
 */
proto.co.gaffe.proto.Literal.prototype.getDecimal = function() {
  return /** @type{?proto.co.gaffe.proto.Literal.Decimal} */ (
    jspb.Message.getWrapperField(this, proto.co.gaffe.proto.Literal.Decimal, 12));
};


/**
 * @param {?proto.co.gaffe.proto.Literal.Decimal|undefined} value
 * @return {!proto.co.gaffe.proto.Literal} returns this
*/
proto.co.gaffe.proto.Literal.prototype.setDecimal = function(value) {
  return jspb.Message.setOneofWrapperField(this, 12, proto.co.gaffe.proto.Literal.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.co.gaffe.proto.Literal} returns this
 */
proto.co.gaffe.proto.Literal.prototype.clearDecimal = function() {
  return this.setDecimal(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.co.gaffe.proto.Literal.prototype.hasDecimal = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional string string = 13;
 * @return {string}
 */
proto.co.gaffe.proto.Literal.prototype.getString = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/**
 * @param {string} value
 * @return {!proto.co.gaffe.proto.Literal} returns this
 */
proto.co.gaffe.proto.Literal.prototype.setString = function(value) {
  return jspb.Message.setOneofField(this, 13, proto.co.gaffe.proto.Literal.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.co.gaffe.proto.Literal} returns this
 */
proto.co.gaffe.proto.Literal.prototype.clearString = function() {
  return jspb.Message.setOneofField(this, 13, proto.co.gaffe.proto.Literal.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.co.gaffe.proto.Literal.prototype.hasString = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional int32 date = 16;
 * @return {number}
 */
proto.co.gaffe.proto.Literal.prototype.getDate = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 16, 0));
};


/**
 * @param {number} value
 * @return {!proto.co.gaffe.proto.Literal} returns this
 */
proto.co.gaffe.proto.Literal.prototype.setDate = function(value) {
  return jspb.Message.setOneofField(this, 16, proto.co.gaffe.proto.Literal.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.co.gaffe.proto.Literal} returns this
 */
proto.co.gaffe.proto.Literal.prototype.clearDate = function() {
  return jspb.Message.setOneofField(this, 16, proto.co.gaffe.proto.Literal.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.co.gaffe.proto.Literal.prototype.hasDate = function() {
  return jspb.Message.getField(this, 16) != null;
};


/**
 * optional int64 timestamp = 17;
 * @return {number}
 */
proto.co.gaffe.proto.Literal.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 17, 0));
};


/**
 * @param {number} value
 * @return {!proto.co.gaffe.proto.Literal} returns this
 */
proto.co.gaffe.proto.Literal.prototype.setTimestamp = function(value) {
  return jspb.Message.setOneofField(this, 17, proto.co.gaffe.proto.Literal.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.co.gaffe.proto.Literal} returns this
 */
proto.co.gaffe.proto.Literal.prototype.clearTimestamp = function() {
  return jspb.Message.setOneofField(this, 17, proto.co.gaffe.proto.Literal.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.co.gaffe.proto.Literal.prototype.hasTimestamp = function() {
  return jspb.Message.getField(this, 17) != null;
};


/**
 * optional int64 timestamp_ntz = 18;
 * @return {number}
 */
proto.co.gaffe.proto.Literal.prototype.getTimestampNtz = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 18, 0));
};


/**
 * @param {number} value
 * @return {!proto.co.gaffe.proto.Literal} returns this
 */
proto.co.gaffe.proto.Literal.prototype.setTimestampNtz = function(value) {
  return jspb.Message.setOneofField(this, 18, proto.co.gaffe.proto.Literal.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.co.gaffe.proto.Literal} returns this
 */
proto.co.gaffe.proto.Literal.prototype.clearTimestampNtz = function() {
  return jspb.Message.setOneofField(this, 18, proto.co.gaffe.proto.Literal.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.co.gaffe.proto.Literal.prototype.hasTimestampNtz = function() {
  return jspb.Message.getField(this, 18) != null;
};


/**
 * optional CalendarInterval calendar_interval = 19;
 * @return {?proto.co.gaffe.proto.Literal.CalendarInterval}
 */
proto.co.gaffe.proto.Literal.prototype.getCalendarInterval = function() {
  return /** @type{?proto.co.gaffe.proto.Literal.CalendarInterval} */ (
    jspb.Message.getWrapperField(this, proto.co.gaffe.proto.Literal.CalendarInterval, 19));
};


/**
 * @param {?proto.co.gaffe.proto.Literal.CalendarInterval|undefined} value
 * @return {!proto.co.gaffe.proto.Literal} returns this
*/
proto.co.gaffe.proto.Literal.prototype.setCalendarInterval = function(value) {
  return jspb.Message.setOneofWrapperField(this, 19, proto.co.gaffe.proto.Literal.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.co.gaffe.proto.Literal} returns this
 */
proto.co.gaffe.proto.Literal.prototype.clearCalendarInterval = function() {
  return this.setCalendarInterval(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.co.gaffe.proto.Literal.prototype.hasCalendarInterval = function() {
  return jspb.Message.getField(this, 19) != null;
};


/**
 * optional int32 year_month_interval = 20;
 * @return {number}
 */
proto.co.gaffe.proto.Literal.prototype.getYearMonthInterval = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 20, 0));
};


/**
 * @param {number} value
 * @return {!proto.co.gaffe.proto.Literal} returns this
 */
proto.co.gaffe.proto.Literal.prototype.setYearMonthInterval = function(value) {
  return jspb.Message.setOneofField(this, 20, proto.co.gaffe.proto.Literal.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.co.gaffe.proto.Literal} returns this
 */
proto.co.gaffe.proto.Literal.prototype.clearYearMonthInterval = function() {
  return jspb.Message.setOneofField(this, 20, proto.co.gaffe.proto.Literal.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.co.gaffe.proto.Literal.prototype.hasYearMonthInterval = function() {
  return jspb.Message.getField(this, 20) != null;
};


/**
 * optional int64 day_time_interval = 21;
 * @return {number}
 */
proto.co.gaffe.proto.Literal.prototype.getDayTimeInterval = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 21, 0));
};


/**
 * @param {number} value
 * @return {!proto.co.gaffe.proto.Literal} returns this
 */
proto.co.gaffe.proto.Literal.prototype.setDayTimeInterval = function(value) {
  return jspb.Message.setOneofField(this, 21, proto.co.gaffe.proto.Literal.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.co.gaffe.proto.Literal} returns this
 */
proto.co.gaffe.proto.Literal.prototype.clearDayTimeInterval = function() {
  return jspb.Message.setOneofField(this, 21, proto.co.gaffe.proto.Literal.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.co.gaffe.proto.Literal.prototype.hasDayTimeInterval = function() {
  return jspb.Message.getField(this, 21) != null;
};


/**
 * optional Array array = 22;
 * @return {?proto.co.gaffe.proto.Literal.Array}
 */
proto.co.gaffe.proto.Literal.prototype.getArray = function() {
  return /** @type{?proto.co.gaffe.proto.Literal.Array} */ (
    jspb.Message.getWrapperField(this, proto.co.gaffe.proto.Literal.Array, 22));
};


/**
 * @param {?proto.co.gaffe.proto.Literal.Array|undefined} value
 * @return {!proto.co.gaffe.proto.Literal} returns this
*/
proto.co.gaffe.proto.Literal.prototype.setArray = function(value) {
  return jspb.Message.setOneofWrapperField(this, 22, proto.co.gaffe.proto.Literal.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.co.gaffe.proto.Literal} returns this
 */
proto.co.gaffe.proto.Literal.prototype.clearArray = function() {
  return this.setArray(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.co.gaffe.proto.Literal.prototype.hasArray = function() {
  return jspb.Message.getField(this, 22) != null;
};


/**
 * optional Map map = 23;
 * @return {?proto.co.gaffe.proto.Literal.Map}
 */
proto.co.gaffe.proto.Literal.prototype.getMap = function() {
  return /** @type{?proto.co.gaffe.proto.Literal.Map} */ (
    jspb.Message.getWrapperField(this, proto.co.gaffe.proto.Literal.Map, 23));
};


/**
 * @param {?proto.co.gaffe.proto.Literal.Map|undefined} value
 * @return {!proto.co.gaffe.proto.Literal} returns this
*/
proto.co.gaffe.proto.Literal.prototype.setMap = function(value) {
  return jspb.Message.setOneofWrapperField(this, 23, proto.co.gaffe.proto.Literal.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.co.gaffe.proto.Literal} returns this
 */
proto.co.gaffe.proto.Literal.prototype.clearMap = function() {
  return this.setMap(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.co.gaffe.proto.Literal.prototype.hasMap = function() {
  return jspb.Message.getField(this, 23) != null;
};


/**
 * optional Struct struct = 24;
 * @return {?proto.co.gaffe.proto.Literal.Struct}
 */
proto.co.gaffe.proto.Literal.prototype.getStruct = function() {
  return /** @type{?proto.co.gaffe.proto.Literal.Struct} */ (
    jspb.Message.getWrapperField(this, proto.co.gaffe.proto.Literal.Struct, 24));
};


/**
 * @param {?proto.co.gaffe.proto.Literal.Struct|undefined} value
 * @return {!proto.co.gaffe.proto.Literal} returns this
*/
proto.co.gaffe.proto.Literal.prototype.setStruct = function(value) {
  return jspb.Message.setOneofWrapperField(this, 24, proto.co.gaffe.proto.Literal.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.co.gaffe.proto.Literal} returns this
 */
proto.co.gaffe.proto.Literal.prototype.clearStruct = function() {
  return this.setStruct(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.co.gaffe.proto.Literal.prototype.hasStruct = function() {
  return jspb.Message.getField(this, 24) != null;
};


goog.object.extend(exports, proto.co.gaffe.proto);
