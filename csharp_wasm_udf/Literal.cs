// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: literal.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Co.Gaffe.Proto {

  /// <summary>Holder for reflection information generated from literal.proto</summary>
  public static partial class LiteralReflection {

    #region Descriptor
    /// <summary>File descriptor for literal.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static LiteralReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg1saXRlcmFsLnByb3RvEg5jby5nYWZmZS5wcm90bxoZZ29vZ2xlL3Byb3Rv",
            "YnVmL2FueS5wcm90bxoLdHlwZXMucHJvdG8ihAkKB0xpdGVyYWwSKAoEbnVs",
            "bBgBIAEoCzIYLmNvLmdhZmZlLnByb3RvLkRhdGFUeXBlSAASEAoGYmluYXJ5",
            "GAIgASgMSAASEQoHYm9vbGVhbhgDIAEoCEgAEg4KBGJ5dGUYBCABKAVIABIP",
            "CgVzaG9ydBgFIAEoBUgAEhEKB2ludGVnZXIYBiABKAVIABIOCgRsb25nGAcg",
            "ASgDSAASDwoFZmxvYXQYCiABKAJIABIQCgZkb3VibGUYCyABKAFIABIyCgdk",
            "ZWNpbWFsGAwgASgLMh8uY28uZ2FmZmUucHJvdG8uTGl0ZXJhbC5EZWNpbWFs",
            "SAASEAoGc3RyaW5nGA0gASgJSAASDgoEZGF0ZRgQIAEoBUgAEhMKCXRpbWVz",
            "dGFtcBgRIAEoA0gAEhcKDXRpbWVzdGFtcF9udHoYEiABKANIABJFChFjYWxl",
            "bmRhcl9pbnRlcnZhbBgTIAEoCzIoLmNvLmdhZmZlLnByb3RvLkxpdGVyYWwu",
            "Q2FsZW5kYXJJbnRlcnZhbEgAEh0KE3llYXJfbW9udGhfaW50ZXJ2YWwYFCAB",
            "KAVIABIbChFkYXlfdGltZV9pbnRlcnZhbBgVIAEoA0gAEi4KBWFycmF5GBYg",
            "ASgLMh0uY28uZ2FmZmUucHJvdG8uTGl0ZXJhbC5BcnJheUgAEioKA21hcBgX",
            "IAEoCzIbLmNvLmdhZmZlLnByb3RvLkxpdGVyYWwuTWFwSAASMAoGc3RydWN0",
            "GBggASgLMh4uY28uZ2FmZmUucHJvdG8uTGl0ZXJhbC5TdHJ1Y3RIABpcCgdE",
            "ZWNpbWFsEg0KBXZhbHVlGAEgASgJEhYKCXByZWNpc2lvbhgCIAEoBUgAiAEB",
            "EhIKBXNjYWxlGAMgASgFSAGIAQFCDAoKX3ByZWNpc2lvbkIICgZfc2NhbGUa",
            "RgoQQ2FsZW5kYXJJbnRlcnZhbBIOCgZtb250aHMYASABKAUSDAoEZGF5cxgC",
            "IAEoBRIUCgxtaWNyb3NlY29uZHMYAyABKAMaYgoFQXJyYXkSLgoMZWxlbWVu",
            "dF90eXBlGAEgASgLMhguY28uZ2FmZmUucHJvdG8uRGF0YVR5cGUSKQoIZWxl",
            "bWVudHMYAiADKAsyFy5jby5nYWZmZS5wcm90by5MaXRlcmFsGq8BCgNNYXAS",
            "KgoIa2V5X3R5cGUYASABKAsyGC5jby5nYWZmZS5wcm90by5EYXRhVHlwZRIs",
            "Cgp2YWx1ZV90eXBlGAIgASgLMhguY28uZ2FmZmUucHJvdG8uRGF0YVR5cGUS",
            "JQoEa2V5cxgDIAMoCzIXLmNvLmdhZmZlLnByb3RvLkxpdGVyYWwSJwoGdmFs",
            "dWVzGAQgAygLMhcuY28uZ2FmZmUucHJvdG8uTGl0ZXJhbBpiCgZTdHJ1Y3QS",
            "LQoLc3RydWN0X3R5cGUYASABKAsyGC5jby5nYWZmZS5wcm90by5EYXRhVHlw",
            "ZRIpCghlbGVtZW50cxgCIAMoCzIXLmNvLmdhZmZlLnByb3RvLkxpdGVyYWxC",
            "DgoMbGl0ZXJhbF90eXBlQiYKDmNvLmdhZmZlLnByb3RvUAFaEmludGVybmFs",
            "L2dlbmVyYXRlZGIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Protobuf.WellKnownTypes.AnyReflection.Descriptor, global::Co.Gaffe.Proto.TypesReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Co.Gaffe.Proto.Literal), global::Co.Gaffe.Proto.Literal.Parser, new[]{ "Null", "Binary", "Boolean", "Byte", "Short", "Integer", "Long", "Float", "Double", "Decimal", "String", "Date", "Timestamp", "TimestampNtz", "CalendarInterval", "YearMonthInterval", "DayTimeInterval", "Array", "Map", "Struct" }, new[]{ "LiteralType" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Co.Gaffe.Proto.Literal.Types.Decimal), global::Co.Gaffe.Proto.Literal.Types.Decimal.Parser, new[]{ "Value", "Precision", "Scale" }, new[]{ "Precision", "Scale" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Co.Gaffe.Proto.Literal.Types.CalendarInterval), global::Co.Gaffe.Proto.Literal.Types.CalendarInterval.Parser, new[]{ "Months", "Days", "Microseconds" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Co.Gaffe.Proto.Literal.Types.Array), global::Co.Gaffe.Proto.Literal.Types.Array.Parser, new[]{ "ElementType", "Elements" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Co.Gaffe.Proto.Literal.Types.Map), global::Co.Gaffe.Proto.Literal.Types.Map.Parser, new[]{ "KeyType", "ValueType", "Keys", "Values" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Co.Gaffe.Proto.Literal.Types.Struct), global::Co.Gaffe.Proto.Literal.Types.Struct.Parser, new[]{ "StructType", "Elements" }, null, null, null, null)})
          }));
    }
    #endregion

  }
  #region Messages
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class Literal : pb::IMessage<Literal>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Literal> _parser = new pb::MessageParser<Literal>(() => new Literal());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<Literal> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Co.Gaffe.Proto.LiteralReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Literal() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Literal(Literal other) : this() {
      switch (other.LiteralTypeCase) {
        case LiteralTypeOneofCase.Null:
          Null = other.Null.Clone();
          break;
        case LiteralTypeOneofCase.Binary:
          Binary = other.Binary;
          break;
        case LiteralTypeOneofCase.Boolean:
          Boolean = other.Boolean;
          break;
        case LiteralTypeOneofCase.Byte:
          Byte = other.Byte;
          break;
        case LiteralTypeOneofCase.Short:
          Short = other.Short;
          break;
        case LiteralTypeOneofCase.Integer:
          Integer = other.Integer;
          break;
        case LiteralTypeOneofCase.Long:
          Long = other.Long;
          break;
        case LiteralTypeOneofCase.Float:
          Float = other.Float;
          break;
        case LiteralTypeOneofCase.Double:
          Double = other.Double;
          break;
        case LiteralTypeOneofCase.Decimal:
          Decimal = other.Decimal.Clone();
          break;
        case LiteralTypeOneofCase.String:
          String = other.String;
          break;
        case LiteralTypeOneofCase.Date:
          Date = other.Date;
          break;
        case LiteralTypeOneofCase.Timestamp:
          Timestamp = other.Timestamp;
          break;
        case LiteralTypeOneofCase.TimestampNtz:
          TimestampNtz = other.TimestampNtz;
          break;
        case LiteralTypeOneofCase.CalendarInterval:
          CalendarInterval = other.CalendarInterval.Clone();
          break;
        case LiteralTypeOneofCase.YearMonthInterval:
          YearMonthInterval = other.YearMonthInterval;
          break;
        case LiteralTypeOneofCase.DayTimeInterval:
          DayTimeInterval = other.DayTimeInterval;
          break;
        case LiteralTypeOneofCase.Array:
          Array = other.Array.Clone();
          break;
        case LiteralTypeOneofCase.Map:
          Map = other.Map.Clone();
          break;
        case LiteralTypeOneofCase.Struct:
          Struct = other.Struct.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Literal Clone() {
      return new Literal(this);
    }

    /// <summary>Field number for the "null" field.</summary>
    public const int NullFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Co.Gaffe.Proto.DataType Null {
      get { return literalTypeCase_ == LiteralTypeOneofCase.Null ? (global::Co.Gaffe.Proto.DataType) literalType_ : null; }
      set {
        literalType_ = value;
        literalTypeCase_ = value == null ? LiteralTypeOneofCase.None : LiteralTypeOneofCase.Null;
      }
    }

    /// <summary>Field number for the "binary" field.</summary>
    public const int BinaryFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pb::ByteString Binary {
      get { return HasBinary ? (pb::ByteString) literalType_ : pb::ByteString.Empty; }
      set {
        literalType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        literalTypeCase_ = LiteralTypeOneofCase.Binary;
      }
    }
    /// <summary>Gets whether the "binary" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasBinary {
      get { return literalTypeCase_ == LiteralTypeOneofCase.Binary; }
    }
    /// <summary> Clears the value of the oneof if it's currently set to "binary" </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearBinary() {
      if (HasBinary) {
        ClearLiteralType();
      }
    }

    /// <summary>Field number for the "boolean" field.</summary>
    public const int BooleanFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Boolean {
      get { return HasBoolean ? (bool) literalType_ : false; }
      set {
        literalType_ = value;
        literalTypeCase_ = LiteralTypeOneofCase.Boolean;
      }
    }
    /// <summary>Gets whether the "boolean" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasBoolean {
      get { return literalTypeCase_ == LiteralTypeOneofCase.Boolean; }
    }
    /// <summary> Clears the value of the oneof if it's currently set to "boolean" </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearBoolean() {
      if (HasBoolean) {
        ClearLiteralType();
      }
    }

    /// <summary>Field number for the "byte" field.</summary>
    public const int ByteFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Byte {
      get { return HasByte ? (int) literalType_ : 0; }
      set {
        literalType_ = value;
        literalTypeCase_ = LiteralTypeOneofCase.Byte;
      }
    }
    /// <summary>Gets whether the "byte" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasByte {
      get { return literalTypeCase_ == LiteralTypeOneofCase.Byte; }
    }
    /// <summary> Clears the value of the oneof if it's currently set to "byte" </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearByte() {
      if (HasByte) {
        ClearLiteralType();
      }
    }

    /// <summary>Field number for the "short" field.</summary>
    public const int ShortFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Short {
      get { return HasShort ? (int) literalType_ : 0; }
      set {
        literalType_ = value;
        literalTypeCase_ = LiteralTypeOneofCase.Short;
      }
    }
    /// <summary>Gets whether the "short" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasShort {
      get { return literalTypeCase_ == LiteralTypeOneofCase.Short; }
    }
    /// <summary> Clears the value of the oneof if it's currently set to "short" </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearShort() {
      if (HasShort) {
        ClearLiteralType();
      }
    }

    /// <summary>Field number for the "integer" field.</summary>
    public const int IntegerFieldNumber = 6;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Integer {
      get { return HasInteger ? (int) literalType_ : 0; }
      set {
        literalType_ = value;
        literalTypeCase_ = LiteralTypeOneofCase.Integer;
      }
    }
    /// <summary>Gets whether the "integer" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasInteger {
      get { return literalTypeCase_ == LiteralTypeOneofCase.Integer; }
    }
    /// <summary> Clears the value of the oneof if it's currently set to "integer" </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearInteger() {
      if (HasInteger) {
        ClearLiteralType();
      }
    }

    /// <summary>Field number for the "long" field.</summary>
    public const int LongFieldNumber = 7;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long Long {
      get { return HasLong ? (long) literalType_ : 0L; }
      set {
        literalType_ = value;
        literalTypeCase_ = LiteralTypeOneofCase.Long;
      }
    }
    /// <summary>Gets whether the "long" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLong {
      get { return literalTypeCase_ == LiteralTypeOneofCase.Long; }
    }
    /// <summary> Clears the value of the oneof if it's currently set to "long" </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLong() {
      if (HasLong) {
        ClearLiteralType();
      }
    }

    /// <summary>Field number for the "float" field.</summary>
    public const int FloatFieldNumber = 10;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Float {
      get { return HasFloat ? (float) literalType_ : 0F; }
      set {
        literalType_ = value;
        literalTypeCase_ = LiteralTypeOneofCase.Float;
      }
    }
    /// <summary>Gets whether the "float" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasFloat {
      get { return literalTypeCase_ == LiteralTypeOneofCase.Float; }
    }
    /// <summary> Clears the value of the oneof if it's currently set to "float" </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearFloat() {
      if (HasFloat) {
        ClearLiteralType();
      }
    }

    /// <summary>Field number for the "double" field.</summary>
    public const int DoubleFieldNumber = 11;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double Double {
      get { return HasDouble ? (double) literalType_ : 0D; }
      set {
        literalType_ = value;
        literalTypeCase_ = LiteralTypeOneofCase.Double;
      }
    }
    /// <summary>Gets whether the "double" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasDouble {
      get { return literalTypeCase_ == LiteralTypeOneofCase.Double; }
    }
    /// <summary> Clears the value of the oneof if it's currently set to "double" </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearDouble() {
      if (HasDouble) {
        ClearLiteralType();
      }
    }

    /// <summary>Field number for the "decimal" field.</summary>
    public const int DecimalFieldNumber = 12;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Co.Gaffe.Proto.Literal.Types.Decimal Decimal {
      get { return literalTypeCase_ == LiteralTypeOneofCase.Decimal ? (global::Co.Gaffe.Proto.Literal.Types.Decimal) literalType_ : null; }
      set {
        literalType_ = value;
        literalTypeCase_ = value == null ? LiteralTypeOneofCase.None : LiteralTypeOneofCase.Decimal;
      }
    }

    /// <summary>Field number for the "string" field.</summary>
    public const int StringFieldNumber = 13;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string String {
      get { return HasString ? (string) literalType_ : ""; }
      set {
        literalType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        literalTypeCase_ = LiteralTypeOneofCase.String;
      }
    }
    /// <summary>Gets whether the "string" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasString {
      get { return literalTypeCase_ == LiteralTypeOneofCase.String; }
    }
    /// <summary> Clears the value of the oneof if it's currently set to "string" </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearString() {
      if (HasString) {
        ClearLiteralType();
      }
    }

    /// <summary>Field number for the "date" field.</summary>
    public const int DateFieldNumber = 16;
    /// <summary>
    /// Date in units of days since the UNIX epoch.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Date {
      get { return HasDate ? (int) literalType_ : 0; }
      set {
        literalType_ = value;
        literalTypeCase_ = LiteralTypeOneofCase.Date;
      }
    }
    /// <summary>Gets whether the "date" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasDate {
      get { return literalTypeCase_ == LiteralTypeOneofCase.Date; }
    }
    /// <summary> Clears the value of the oneof if it's currently set to "date" </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearDate() {
      if (HasDate) {
        ClearLiteralType();
      }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 17;
    /// <summary>
    /// Timestamp in units of microseconds since the UNIX epoch.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long Timestamp {
      get { return HasTimestamp ? (long) literalType_ : 0L; }
      set {
        literalType_ = value;
        literalTypeCase_ = LiteralTypeOneofCase.Timestamp;
      }
    }
    /// <summary>Gets whether the "timestamp" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasTimestamp {
      get { return literalTypeCase_ == LiteralTypeOneofCase.Timestamp; }
    }
    /// <summary> Clears the value of the oneof if it's currently set to "timestamp" </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearTimestamp() {
      if (HasTimestamp) {
        ClearLiteralType();
      }
    }

    /// <summary>Field number for the "timestamp_ntz" field.</summary>
    public const int TimestampNtzFieldNumber = 18;
    /// <summary>
    /// Timestamp in units of microseconds since the UNIX epoch (without timezone information).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long TimestampNtz {
      get { return HasTimestampNtz ? (long) literalType_ : 0L; }
      set {
        literalType_ = value;
        literalTypeCase_ = LiteralTypeOneofCase.TimestampNtz;
      }
    }
    /// <summary>Gets whether the "timestamp_ntz" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasTimestampNtz {
      get { return literalTypeCase_ == LiteralTypeOneofCase.TimestampNtz; }
    }
    /// <summary> Clears the value of the oneof if it's currently set to "timestamp_ntz" </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearTimestampNtz() {
      if (HasTimestampNtz) {
        ClearLiteralType();
      }
    }

    /// <summary>Field number for the "calendar_interval" field.</summary>
    public const int CalendarIntervalFieldNumber = 19;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Co.Gaffe.Proto.Literal.Types.CalendarInterval CalendarInterval {
      get { return literalTypeCase_ == LiteralTypeOneofCase.CalendarInterval ? (global::Co.Gaffe.Proto.Literal.Types.CalendarInterval) literalType_ : null; }
      set {
        literalType_ = value;
        literalTypeCase_ = value == null ? LiteralTypeOneofCase.None : LiteralTypeOneofCase.CalendarInterval;
      }
    }

    /// <summary>Field number for the "year_month_interval" field.</summary>
    public const int YearMonthIntervalFieldNumber = 20;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int YearMonthInterval {
      get { return HasYearMonthInterval ? (int) literalType_ : 0; }
      set {
        literalType_ = value;
        literalTypeCase_ = LiteralTypeOneofCase.YearMonthInterval;
      }
    }
    /// <summary>Gets whether the "year_month_interval" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasYearMonthInterval {
      get { return literalTypeCase_ == LiteralTypeOneofCase.YearMonthInterval; }
    }
    /// <summary> Clears the value of the oneof if it's currently set to "year_month_interval" </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearYearMonthInterval() {
      if (HasYearMonthInterval) {
        ClearLiteralType();
      }
    }

    /// <summary>Field number for the "day_time_interval" field.</summary>
    public const int DayTimeIntervalFieldNumber = 21;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long DayTimeInterval {
      get { return HasDayTimeInterval ? (long) literalType_ : 0L; }
      set {
        literalType_ = value;
        literalTypeCase_ = LiteralTypeOneofCase.DayTimeInterval;
      }
    }
    /// <summary>Gets whether the "day_time_interval" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasDayTimeInterval {
      get { return literalTypeCase_ == LiteralTypeOneofCase.DayTimeInterval; }
    }
    /// <summary> Clears the value of the oneof if it's currently set to "day_time_interval" </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearDayTimeInterval() {
      if (HasDayTimeInterval) {
        ClearLiteralType();
      }
    }

    /// <summary>Field number for the "array" field.</summary>
    public const int ArrayFieldNumber = 22;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Co.Gaffe.Proto.Literal.Types.Array Array {
      get { return literalTypeCase_ == LiteralTypeOneofCase.Array ? (global::Co.Gaffe.Proto.Literal.Types.Array) literalType_ : null; }
      set {
        literalType_ = value;
        literalTypeCase_ = value == null ? LiteralTypeOneofCase.None : LiteralTypeOneofCase.Array;
      }
    }

    /// <summary>Field number for the "map" field.</summary>
    public const int MapFieldNumber = 23;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Co.Gaffe.Proto.Literal.Types.Map Map {
      get { return literalTypeCase_ == LiteralTypeOneofCase.Map ? (global::Co.Gaffe.Proto.Literal.Types.Map) literalType_ : null; }
      set {
        literalType_ = value;
        literalTypeCase_ = value == null ? LiteralTypeOneofCase.None : LiteralTypeOneofCase.Map;
      }
    }

    /// <summary>Field number for the "struct" field.</summary>
    public const int StructFieldNumber = 24;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Co.Gaffe.Proto.Literal.Types.Struct Struct {
      get { return literalTypeCase_ == LiteralTypeOneofCase.Struct ? (global::Co.Gaffe.Proto.Literal.Types.Struct) literalType_ : null; }
      set {
        literalType_ = value;
        literalTypeCase_ = value == null ? LiteralTypeOneofCase.None : LiteralTypeOneofCase.Struct;
      }
    }

    private object literalType_;
    /// <summary>Enum of possible cases for the "literal_type" oneof.</summary>
    public enum LiteralTypeOneofCase {
      None = 0,
      Null = 1,
      Binary = 2,
      Boolean = 3,
      Byte = 4,
      Short = 5,
      Integer = 6,
      Long = 7,
      Float = 10,
      Double = 11,
      Decimal = 12,
      String = 13,
      Date = 16,
      Timestamp = 17,
      TimestampNtz = 18,
      CalendarInterval = 19,
      YearMonthInterval = 20,
      DayTimeInterval = 21,
      Array = 22,
      Map = 23,
      Struct = 24,
    }
    private LiteralTypeOneofCase literalTypeCase_ = LiteralTypeOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public LiteralTypeOneofCase LiteralTypeCase {
      get { return literalTypeCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLiteralType() {
      literalTypeCase_ = LiteralTypeOneofCase.None;
      literalType_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as Literal);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(Literal other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Null, other.Null)) return false;
      if (Binary != other.Binary) return false;
      if (Boolean != other.Boolean) return false;
      if (Byte != other.Byte) return false;
      if (Short != other.Short) return false;
      if (Integer != other.Integer) return false;
      if (Long != other.Long) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Float, other.Float)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Double, other.Double)) return false;
      if (!object.Equals(Decimal, other.Decimal)) return false;
      if (String != other.String) return false;
      if (Date != other.Date) return false;
      if (Timestamp != other.Timestamp) return false;
      if (TimestampNtz != other.TimestampNtz) return false;
      if (!object.Equals(CalendarInterval, other.CalendarInterval)) return false;
      if (YearMonthInterval != other.YearMonthInterval) return false;
      if (DayTimeInterval != other.DayTimeInterval) return false;
      if (!object.Equals(Array, other.Array)) return false;
      if (!object.Equals(Map, other.Map)) return false;
      if (!object.Equals(Struct, other.Struct)) return false;
      if (LiteralTypeCase != other.LiteralTypeCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (literalTypeCase_ == LiteralTypeOneofCase.Null) hash ^= Null.GetHashCode();
      if (HasBinary) hash ^= Binary.GetHashCode();
      if (HasBoolean) hash ^= Boolean.GetHashCode();
      if (HasByte) hash ^= Byte.GetHashCode();
      if (HasShort) hash ^= Short.GetHashCode();
      if (HasInteger) hash ^= Integer.GetHashCode();
      if (HasLong) hash ^= Long.GetHashCode();
      if (HasFloat) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Float);
      if (HasDouble) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Double);
      if (literalTypeCase_ == LiteralTypeOneofCase.Decimal) hash ^= Decimal.GetHashCode();
      if (HasString) hash ^= String.GetHashCode();
      if (HasDate) hash ^= Date.GetHashCode();
      if (HasTimestamp) hash ^= Timestamp.GetHashCode();
      if (HasTimestampNtz) hash ^= TimestampNtz.GetHashCode();
      if (literalTypeCase_ == LiteralTypeOneofCase.CalendarInterval) hash ^= CalendarInterval.GetHashCode();
      if (HasYearMonthInterval) hash ^= YearMonthInterval.GetHashCode();
      if (HasDayTimeInterval) hash ^= DayTimeInterval.GetHashCode();
      if (literalTypeCase_ == LiteralTypeOneofCase.Array) hash ^= Array.GetHashCode();
      if (literalTypeCase_ == LiteralTypeOneofCase.Map) hash ^= Map.GetHashCode();
      if (literalTypeCase_ == LiteralTypeOneofCase.Struct) hash ^= Struct.GetHashCode();
      hash ^= (int) literalTypeCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (literalTypeCase_ == LiteralTypeOneofCase.Null) {
        output.WriteRawTag(10);
        output.WriteMessage(Null);
      }
      if (HasBinary) {
        output.WriteRawTag(18);
        output.WriteBytes(Binary);
      }
      if (HasBoolean) {
        output.WriteRawTag(24);
        output.WriteBool(Boolean);
      }
      if (HasByte) {
        output.WriteRawTag(32);
        output.WriteInt32(Byte);
      }
      if (HasShort) {
        output.WriteRawTag(40);
        output.WriteInt32(Short);
      }
      if (HasInteger) {
        output.WriteRawTag(48);
        output.WriteInt32(Integer);
      }
      if (HasLong) {
        output.WriteRawTag(56);
        output.WriteInt64(Long);
      }
      if (HasFloat) {
        output.WriteRawTag(85);
        output.WriteFloat(Float);
      }
      if (HasDouble) {
        output.WriteRawTag(89);
        output.WriteDouble(Double);
      }
      if (literalTypeCase_ == LiteralTypeOneofCase.Decimal) {
        output.WriteRawTag(98);
        output.WriteMessage(Decimal);
      }
      if (HasString) {
        output.WriteRawTag(106);
        output.WriteString(String);
      }
      if (HasDate) {
        output.WriteRawTag(128, 1);
        output.WriteInt32(Date);
      }
      if (HasTimestamp) {
        output.WriteRawTag(136, 1);
        output.WriteInt64(Timestamp);
      }
      if (HasTimestampNtz) {
        output.WriteRawTag(144, 1);
        output.WriteInt64(TimestampNtz);
      }
      if (literalTypeCase_ == LiteralTypeOneofCase.CalendarInterval) {
        output.WriteRawTag(154, 1);
        output.WriteMessage(CalendarInterval);
      }
      if (HasYearMonthInterval) {
        output.WriteRawTag(160, 1);
        output.WriteInt32(YearMonthInterval);
      }
      if (HasDayTimeInterval) {
        output.WriteRawTag(168, 1);
        output.WriteInt64(DayTimeInterval);
      }
      if (literalTypeCase_ == LiteralTypeOneofCase.Array) {
        output.WriteRawTag(178, 1);
        output.WriteMessage(Array);
      }
      if (literalTypeCase_ == LiteralTypeOneofCase.Map) {
        output.WriteRawTag(186, 1);
        output.WriteMessage(Map);
      }
      if (literalTypeCase_ == LiteralTypeOneofCase.Struct) {
        output.WriteRawTag(194, 1);
        output.WriteMessage(Struct);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (literalTypeCase_ == LiteralTypeOneofCase.Null) {
        output.WriteRawTag(10);
        output.WriteMessage(Null);
      }
      if (HasBinary) {
        output.WriteRawTag(18);
        output.WriteBytes(Binary);
      }
      if (HasBoolean) {
        output.WriteRawTag(24);
        output.WriteBool(Boolean);
      }
      if (HasByte) {
        output.WriteRawTag(32);
        output.WriteInt32(Byte);
      }
      if (HasShort) {
        output.WriteRawTag(40);
        output.WriteInt32(Short);
      }
      if (HasInteger) {
        output.WriteRawTag(48);
        output.WriteInt32(Integer);
      }
      if (HasLong) {
        output.WriteRawTag(56);
        output.WriteInt64(Long);
      }
      if (HasFloat) {
        output.WriteRawTag(85);
        output.WriteFloat(Float);
      }
      if (HasDouble) {
        output.WriteRawTag(89);
        output.WriteDouble(Double);
      }
      if (literalTypeCase_ == LiteralTypeOneofCase.Decimal) {
        output.WriteRawTag(98);
        output.WriteMessage(Decimal);
      }
      if (HasString) {
        output.WriteRawTag(106);
        output.WriteString(String);
      }
      if (HasDate) {
        output.WriteRawTag(128, 1);
        output.WriteInt32(Date);
      }
      if (HasTimestamp) {
        output.WriteRawTag(136, 1);
        output.WriteInt64(Timestamp);
      }
      if (HasTimestampNtz) {
        output.WriteRawTag(144, 1);
        output.WriteInt64(TimestampNtz);
      }
      if (literalTypeCase_ == LiteralTypeOneofCase.CalendarInterval) {
        output.WriteRawTag(154, 1);
        output.WriteMessage(CalendarInterval);
      }
      if (HasYearMonthInterval) {
        output.WriteRawTag(160, 1);
        output.WriteInt32(YearMonthInterval);
      }
      if (HasDayTimeInterval) {
        output.WriteRawTag(168, 1);
        output.WriteInt64(DayTimeInterval);
      }
      if (literalTypeCase_ == LiteralTypeOneofCase.Array) {
        output.WriteRawTag(178, 1);
        output.WriteMessage(Array);
      }
      if (literalTypeCase_ == LiteralTypeOneofCase.Map) {
        output.WriteRawTag(186, 1);
        output.WriteMessage(Map);
      }
      if (literalTypeCase_ == LiteralTypeOneofCase.Struct) {
        output.WriteRawTag(194, 1);
        output.WriteMessage(Struct);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (literalTypeCase_ == LiteralTypeOneofCase.Null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Null);
      }
      if (HasBinary) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Binary);
      }
      if (HasBoolean) {
        size += 1 + 1;
      }
      if (HasByte) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Byte);
      }
      if (HasShort) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Short);
      }
      if (HasInteger) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Integer);
      }
      if (HasLong) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Long);
      }
      if (HasFloat) {
        size += 1 + 4;
      }
      if (HasDouble) {
        size += 1 + 8;
      }
      if (literalTypeCase_ == LiteralTypeOneofCase.Decimal) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Decimal);
      }
      if (HasString) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(String);
      }
      if (HasDate) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Date);
      }
      if (HasTimestamp) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(Timestamp);
      }
      if (HasTimestampNtz) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(TimestampNtz);
      }
      if (literalTypeCase_ == LiteralTypeOneofCase.CalendarInterval) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(CalendarInterval);
      }
      if (HasYearMonthInterval) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(YearMonthInterval);
      }
      if (HasDayTimeInterval) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(DayTimeInterval);
      }
      if (literalTypeCase_ == LiteralTypeOneofCase.Array) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Array);
      }
      if (literalTypeCase_ == LiteralTypeOneofCase.Map) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Map);
      }
      if (literalTypeCase_ == LiteralTypeOneofCase.Struct) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Struct);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(Literal other) {
      if (other == null) {
        return;
      }
      switch (other.LiteralTypeCase) {
        case LiteralTypeOneofCase.Null:
          if (Null == null) {
            Null = new global::Co.Gaffe.Proto.DataType();
          }
          Null.MergeFrom(other.Null);
          break;
        case LiteralTypeOneofCase.Binary:
          Binary = other.Binary;
          break;
        case LiteralTypeOneofCase.Boolean:
          Boolean = other.Boolean;
          break;
        case LiteralTypeOneofCase.Byte:
          Byte = other.Byte;
          break;
        case LiteralTypeOneofCase.Short:
          Short = other.Short;
          break;
        case LiteralTypeOneofCase.Integer:
          Integer = other.Integer;
          break;
        case LiteralTypeOneofCase.Long:
          Long = other.Long;
          break;
        case LiteralTypeOneofCase.Float:
          Float = other.Float;
          break;
        case LiteralTypeOneofCase.Double:
          Double = other.Double;
          break;
        case LiteralTypeOneofCase.Decimal:
          if (Decimal == null) {
            Decimal = new global::Co.Gaffe.Proto.Literal.Types.Decimal();
          }
          Decimal.MergeFrom(other.Decimal);
          break;
        case LiteralTypeOneofCase.String:
          String = other.String;
          break;
        case LiteralTypeOneofCase.Date:
          Date = other.Date;
          break;
        case LiteralTypeOneofCase.Timestamp:
          Timestamp = other.Timestamp;
          break;
        case LiteralTypeOneofCase.TimestampNtz:
          TimestampNtz = other.TimestampNtz;
          break;
        case LiteralTypeOneofCase.CalendarInterval:
          if (CalendarInterval == null) {
            CalendarInterval = new global::Co.Gaffe.Proto.Literal.Types.CalendarInterval();
          }
          CalendarInterval.MergeFrom(other.CalendarInterval);
          break;
        case LiteralTypeOneofCase.YearMonthInterval:
          YearMonthInterval = other.YearMonthInterval;
          break;
        case LiteralTypeOneofCase.DayTimeInterval:
          DayTimeInterval = other.DayTimeInterval;
          break;
        case LiteralTypeOneofCase.Array:
          if (Array == null) {
            Array = new global::Co.Gaffe.Proto.Literal.Types.Array();
          }
          Array.MergeFrom(other.Array);
          break;
        case LiteralTypeOneofCase.Map:
          if (Map == null) {
            Map = new global::Co.Gaffe.Proto.Literal.Types.Map();
          }
          Map.MergeFrom(other.Map);
          break;
        case LiteralTypeOneofCase.Struct:
          if (Struct == null) {
            Struct = new global::Co.Gaffe.Proto.Literal.Types.Struct();
          }
          Struct.MergeFrom(other.Struct);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::Co.Gaffe.Proto.DataType subBuilder = new global::Co.Gaffe.Proto.DataType();
            if (literalTypeCase_ == LiteralTypeOneofCase.Null) {
              subBuilder.MergeFrom(Null);
            }
            input.ReadMessage(subBuilder);
            Null = subBuilder;
            break;
          }
          case 18: {
            Binary = input.ReadBytes();
            break;
          }
          case 24: {
            Boolean = input.ReadBool();
            break;
          }
          case 32: {
            Byte = input.ReadInt32();
            break;
          }
          case 40: {
            Short = input.ReadInt32();
            break;
          }
          case 48: {
            Integer = input.ReadInt32();
            break;
          }
          case 56: {
            Long = input.ReadInt64();
            break;
          }
          case 85: {
            Float = input.ReadFloat();
            break;
          }
          case 89: {
            Double = input.ReadDouble();
            break;
          }
          case 98: {
            global::Co.Gaffe.Proto.Literal.Types.Decimal subBuilder = new global::Co.Gaffe.Proto.Literal.Types.Decimal();
            if (literalTypeCase_ == LiteralTypeOneofCase.Decimal) {
              subBuilder.MergeFrom(Decimal);
            }
            input.ReadMessage(subBuilder);
            Decimal = subBuilder;
            break;
          }
          case 106: {
            String = input.ReadString();
            break;
          }
          case 128: {
            Date = input.ReadInt32();
            break;
          }
          case 136: {
            Timestamp = input.ReadInt64();
            break;
          }
          case 144: {
            TimestampNtz = input.ReadInt64();
            break;
          }
          case 154: {
            global::Co.Gaffe.Proto.Literal.Types.CalendarInterval subBuilder = new global::Co.Gaffe.Proto.Literal.Types.CalendarInterval();
            if (literalTypeCase_ == LiteralTypeOneofCase.CalendarInterval) {
              subBuilder.MergeFrom(CalendarInterval);
            }
            input.ReadMessage(subBuilder);
            CalendarInterval = subBuilder;
            break;
          }
          case 160: {
            YearMonthInterval = input.ReadInt32();
            break;
          }
          case 168: {
            DayTimeInterval = input.ReadInt64();
            break;
          }
          case 178: {
            global::Co.Gaffe.Proto.Literal.Types.Array subBuilder = new global::Co.Gaffe.Proto.Literal.Types.Array();
            if (literalTypeCase_ == LiteralTypeOneofCase.Array) {
              subBuilder.MergeFrom(Array);
            }
            input.ReadMessage(subBuilder);
            Array = subBuilder;
            break;
          }
          case 186: {
            global::Co.Gaffe.Proto.Literal.Types.Map subBuilder = new global::Co.Gaffe.Proto.Literal.Types.Map();
            if (literalTypeCase_ == LiteralTypeOneofCase.Map) {
              subBuilder.MergeFrom(Map);
            }
            input.ReadMessage(subBuilder);
            Map = subBuilder;
            break;
          }
          case 194: {
            global::Co.Gaffe.Proto.Literal.Types.Struct subBuilder = new global::Co.Gaffe.Proto.Literal.Types.Struct();
            if (literalTypeCase_ == LiteralTypeOneofCase.Struct) {
              subBuilder.MergeFrom(Struct);
            }
            input.ReadMessage(subBuilder);
            Struct = subBuilder;
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            global::Co.Gaffe.Proto.DataType subBuilder = new global::Co.Gaffe.Proto.DataType();
            if (literalTypeCase_ == LiteralTypeOneofCase.Null) {
              subBuilder.MergeFrom(Null);
            }
            input.ReadMessage(subBuilder);
            Null = subBuilder;
            break;
          }
          case 18: {
            Binary = input.ReadBytes();
            break;
          }
          case 24: {
            Boolean = input.ReadBool();
            break;
          }
          case 32: {
            Byte = input.ReadInt32();
            break;
          }
          case 40: {
            Short = input.ReadInt32();
            break;
          }
          case 48: {
            Integer = input.ReadInt32();
            break;
          }
          case 56: {
            Long = input.ReadInt64();
            break;
          }
          case 85: {
            Float = input.ReadFloat();
            break;
          }
          case 89: {
            Double = input.ReadDouble();
            break;
          }
          case 98: {
            global::Co.Gaffe.Proto.Literal.Types.Decimal subBuilder = new global::Co.Gaffe.Proto.Literal.Types.Decimal();
            if (literalTypeCase_ == LiteralTypeOneofCase.Decimal) {
              subBuilder.MergeFrom(Decimal);
            }
            input.ReadMessage(subBuilder);
            Decimal = subBuilder;
            break;
          }
          case 106: {
            String = input.ReadString();
            break;
          }
          case 128: {
            Date = input.ReadInt32();
            break;
          }
          case 136: {
            Timestamp = input.ReadInt64();
            break;
          }
          case 144: {
            TimestampNtz = input.ReadInt64();
            break;
          }
          case 154: {
            global::Co.Gaffe.Proto.Literal.Types.CalendarInterval subBuilder = new global::Co.Gaffe.Proto.Literal.Types.CalendarInterval();
            if (literalTypeCase_ == LiteralTypeOneofCase.CalendarInterval) {
              subBuilder.MergeFrom(CalendarInterval);
            }
            input.ReadMessage(subBuilder);
            CalendarInterval = subBuilder;
            break;
          }
          case 160: {
            YearMonthInterval = input.ReadInt32();
            break;
          }
          case 168: {
            DayTimeInterval = input.ReadInt64();
            break;
          }
          case 178: {
            global::Co.Gaffe.Proto.Literal.Types.Array subBuilder = new global::Co.Gaffe.Proto.Literal.Types.Array();
            if (literalTypeCase_ == LiteralTypeOneofCase.Array) {
              subBuilder.MergeFrom(Array);
            }
            input.ReadMessage(subBuilder);
            Array = subBuilder;
            break;
          }
          case 186: {
            global::Co.Gaffe.Proto.Literal.Types.Map subBuilder = new global::Co.Gaffe.Proto.Literal.Types.Map();
            if (literalTypeCase_ == LiteralTypeOneofCase.Map) {
              subBuilder.MergeFrom(Map);
            }
            input.ReadMessage(subBuilder);
            Map = subBuilder;
            break;
          }
          case 194: {
            global::Co.Gaffe.Proto.Literal.Types.Struct subBuilder = new global::Co.Gaffe.Proto.Literal.Types.Struct();
            if (literalTypeCase_ == LiteralTypeOneofCase.Struct) {
              subBuilder.MergeFrom(Struct);
            }
            input.ReadMessage(subBuilder);
            Struct = subBuilder;
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the Literal message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static partial class Types {
      [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
      public sealed partial class Decimal : pb::IMessage<Decimal>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<Decimal> _parser = new pb::MessageParser<Decimal>(() => new Decimal());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<Decimal> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Co.Gaffe.Proto.Literal.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Decimal() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Decimal(Decimal other) : this() {
          _hasBits0 = other._hasBits0;
          value_ = other.value_;
          precision_ = other.precision_;
          scale_ = other.scale_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Decimal Clone() {
          return new Decimal(this);
        }

        /// <summary>Field number for the "value" field.</summary>
        public const int ValueFieldNumber = 1;
        private string value_ = "";
        /// <summary>
        /// the string representation.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public string Value {
          get { return value_; }
          set {
            value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "precision" field.</summary>
        public const int PrecisionFieldNumber = 2;
        private readonly static int PrecisionDefaultValue = 0;

        private int precision_;
        /// <summary>
        /// The maximum number of digits allowed in the value.
        /// the maximum precision is 38.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int Precision {
          get { if ((_hasBits0 & 1) != 0) { return precision_; } else { return PrecisionDefaultValue; } }
          set {
            _hasBits0 |= 1;
            precision_ = value;
          }
        }
        /// <summary>Gets whether the "precision" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool HasPrecision {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "precision" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void ClearPrecision() {
          _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "scale" field.</summary>
        public const int ScaleFieldNumber = 3;
        private readonly static int ScaleDefaultValue = 0;

        private int scale_;
        /// <summary>
        /// declared scale of decimal literal
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int Scale {
          get { if ((_hasBits0 & 2) != 0) { return scale_; } else { return ScaleDefaultValue; } }
          set {
            _hasBits0 |= 2;
            scale_ = value;
          }
        }
        /// <summary>Gets whether the "scale" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool HasScale {
          get { return (_hasBits0 & 2) != 0; }
        }
        /// <summary>Clears the value of the "scale" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void ClearScale() {
          _hasBits0 &= ~2;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other) {
          return Equals(other as Decimal);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(Decimal other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Value != other.Value) return false;
          if (Precision != other.Precision) return false;
          if (Scale != other.Scale) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode() {
          int hash = 1;
          if (Value.Length != 0) hash ^= Value.GetHashCode();
          if (HasPrecision) hash ^= Precision.GetHashCode();
          if (HasScale) hash ^= Scale.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (Value.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Value);
          }
          if (HasPrecision) {
            output.WriteRawTag(16);
            output.WriteInt32(Precision);
          }
          if (HasScale) {
            output.WriteRawTag(24);
            output.WriteInt32(Scale);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (Value.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Value);
          }
          if (HasPrecision) {
            output.WriteRawTag(16);
            output.WriteInt32(Precision);
          }
          if (HasScale) {
            output.WriteRawTag(24);
            output.WriteInt32(Scale);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize() {
          int size = 0;
          if (Value.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Value);
          }
          if (HasPrecision) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Precision);
          }
          if (HasScale) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Scale);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(Decimal other) {
          if (other == null) {
            return;
          }
          if (other.Value.Length != 0) {
            Value = other.Value;
          }
          if (other.HasPrecision) {
            Precision = other.Precision;
          }
          if (other.HasScale) {
            Scale = other.Scale;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Value = input.ReadString();
                break;
              }
              case 16: {
                Precision = input.ReadInt32();
                break;
              }
              case 24: {
                Scale = input.ReadInt32();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 10: {
                Value = input.ReadString();
                break;
              }
              case 16: {
                Precision = input.ReadInt32();
                break;
              }
              case 24: {
                Scale = input.ReadInt32();
                break;
              }
            }
          }
        }
        #endif

      }

      [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
      public sealed partial class CalendarInterval : pb::IMessage<CalendarInterval>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<CalendarInterval> _parser = new pb::MessageParser<CalendarInterval>(() => new CalendarInterval());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<CalendarInterval> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Co.Gaffe.Proto.Literal.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public CalendarInterval() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public CalendarInterval(CalendarInterval other) : this() {
          months_ = other.months_;
          days_ = other.days_;
          microseconds_ = other.microseconds_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public CalendarInterval Clone() {
          return new CalendarInterval(this);
        }

        /// <summary>Field number for the "months" field.</summary>
        public const int MonthsFieldNumber = 1;
        private int months_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int Months {
          get { return months_; }
          set {
            months_ = value;
          }
        }

        /// <summary>Field number for the "days" field.</summary>
        public const int DaysFieldNumber = 2;
        private int days_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int Days {
          get { return days_; }
          set {
            days_ = value;
          }
        }

        /// <summary>Field number for the "microseconds" field.</summary>
        public const int MicrosecondsFieldNumber = 3;
        private long microseconds_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public long Microseconds {
          get { return microseconds_; }
          set {
            microseconds_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other) {
          return Equals(other as CalendarInterval);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(CalendarInterval other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Months != other.Months) return false;
          if (Days != other.Days) return false;
          if (Microseconds != other.Microseconds) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode() {
          int hash = 1;
          if (Months != 0) hash ^= Months.GetHashCode();
          if (Days != 0) hash ^= Days.GetHashCode();
          if (Microseconds != 0L) hash ^= Microseconds.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (Months != 0) {
            output.WriteRawTag(8);
            output.WriteInt32(Months);
          }
          if (Days != 0) {
            output.WriteRawTag(16);
            output.WriteInt32(Days);
          }
          if (Microseconds != 0L) {
            output.WriteRawTag(24);
            output.WriteInt64(Microseconds);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (Months != 0) {
            output.WriteRawTag(8);
            output.WriteInt32(Months);
          }
          if (Days != 0) {
            output.WriteRawTag(16);
            output.WriteInt32(Days);
          }
          if (Microseconds != 0L) {
            output.WriteRawTag(24);
            output.WriteInt64(Microseconds);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize() {
          int size = 0;
          if (Months != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Months);
          }
          if (Days != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Days);
          }
          if (Microseconds != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(Microseconds);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(CalendarInterval other) {
          if (other == null) {
            return;
          }
          if (other.Months != 0) {
            Months = other.Months;
          }
          if (other.Days != 0) {
            Days = other.Days;
          }
          if (other.Microseconds != 0L) {
            Microseconds = other.Microseconds;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Months = input.ReadInt32();
                break;
              }
              case 16: {
                Days = input.ReadInt32();
                break;
              }
              case 24: {
                Microseconds = input.ReadInt64();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 8: {
                Months = input.ReadInt32();
                break;
              }
              case 16: {
                Days = input.ReadInt32();
                break;
              }
              case 24: {
                Microseconds = input.ReadInt64();
                break;
              }
            }
          }
        }
        #endif

      }

      [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
      public sealed partial class Array : pb::IMessage<Array>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<Array> _parser = new pb::MessageParser<Array>(() => new Array());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<Array> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Co.Gaffe.Proto.Literal.Descriptor.NestedTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Array() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Array(Array other) : this() {
          elementType_ = other.elementType_ != null ? other.elementType_.Clone() : null;
          elements_ = other.elements_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Array Clone() {
          return new Array(this);
        }

        /// <summary>Field number for the "element_type" field.</summary>
        public const int ElementTypeFieldNumber = 1;
        private global::Co.Gaffe.Proto.DataType elementType_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Co.Gaffe.Proto.DataType ElementType {
          get { return elementType_; }
          set {
            elementType_ = value;
          }
        }

        /// <summary>Field number for the "elements" field.</summary>
        public const int ElementsFieldNumber = 2;
        private static readonly pb::FieldCodec<global::Co.Gaffe.Proto.Literal> _repeated_elements_codec
            = pb::FieldCodec.ForMessage(18, global::Co.Gaffe.Proto.Literal.Parser);
        private readonly pbc::RepeatedField<global::Co.Gaffe.Proto.Literal> elements_ = new pbc::RepeatedField<global::Co.Gaffe.Proto.Literal>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public pbc::RepeatedField<global::Co.Gaffe.Proto.Literal> Elements {
          get { return elements_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other) {
          return Equals(other as Array);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(Array other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(ElementType, other.ElementType)) return false;
          if(!elements_.Equals(other.elements_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode() {
          int hash = 1;
          if (elementType_ != null) hash ^= ElementType.GetHashCode();
          hash ^= elements_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (elementType_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(ElementType);
          }
          elements_.WriteTo(output, _repeated_elements_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (elementType_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(ElementType);
          }
          elements_.WriteTo(ref output, _repeated_elements_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize() {
          int size = 0;
          if (elementType_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(ElementType);
          }
          size += elements_.CalculateSize(_repeated_elements_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(Array other) {
          if (other == null) {
            return;
          }
          if (other.elementType_ != null) {
            if (elementType_ == null) {
              ElementType = new global::Co.Gaffe.Proto.DataType();
            }
            ElementType.MergeFrom(other.ElementType);
          }
          elements_.Add(other.elements_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (elementType_ == null) {
                  ElementType = new global::Co.Gaffe.Proto.DataType();
                }
                input.ReadMessage(ElementType);
                break;
              }
              case 18: {
                elements_.AddEntriesFrom(input, _repeated_elements_codec);
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 10: {
                if (elementType_ == null) {
                  ElementType = new global::Co.Gaffe.Proto.DataType();
                }
                input.ReadMessage(ElementType);
                break;
              }
              case 18: {
                elements_.AddEntriesFrom(ref input, _repeated_elements_codec);
                break;
              }
            }
          }
        }
        #endif

      }

      [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
      public sealed partial class Map : pb::IMessage<Map>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<Map> _parser = new pb::MessageParser<Map>(() => new Map());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<Map> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Co.Gaffe.Proto.Literal.Descriptor.NestedTypes[3]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Map() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Map(Map other) : this() {
          keyType_ = other.keyType_ != null ? other.keyType_.Clone() : null;
          valueType_ = other.valueType_ != null ? other.valueType_.Clone() : null;
          keys_ = other.keys_.Clone();
          values_ = other.values_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Map Clone() {
          return new Map(this);
        }

        /// <summary>Field number for the "key_type" field.</summary>
        public const int KeyTypeFieldNumber = 1;
        private global::Co.Gaffe.Proto.DataType keyType_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Co.Gaffe.Proto.DataType KeyType {
          get { return keyType_; }
          set {
            keyType_ = value;
          }
        }

        /// <summary>Field number for the "value_type" field.</summary>
        public const int ValueTypeFieldNumber = 2;
        private global::Co.Gaffe.Proto.DataType valueType_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Co.Gaffe.Proto.DataType ValueType {
          get { return valueType_; }
          set {
            valueType_ = value;
          }
        }

        /// <summary>Field number for the "keys" field.</summary>
        public const int KeysFieldNumber = 3;
        private static readonly pb::FieldCodec<global::Co.Gaffe.Proto.Literal> _repeated_keys_codec
            = pb::FieldCodec.ForMessage(26, global::Co.Gaffe.Proto.Literal.Parser);
        private readonly pbc::RepeatedField<global::Co.Gaffe.Proto.Literal> keys_ = new pbc::RepeatedField<global::Co.Gaffe.Proto.Literal>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public pbc::RepeatedField<global::Co.Gaffe.Proto.Literal> Keys {
          get { return keys_; }
        }

        /// <summary>Field number for the "values" field.</summary>
        public const int ValuesFieldNumber = 4;
        private static readonly pb::FieldCodec<global::Co.Gaffe.Proto.Literal> _repeated_values_codec
            = pb::FieldCodec.ForMessage(34, global::Co.Gaffe.Proto.Literal.Parser);
        private readonly pbc::RepeatedField<global::Co.Gaffe.Proto.Literal> values_ = new pbc::RepeatedField<global::Co.Gaffe.Proto.Literal>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public pbc::RepeatedField<global::Co.Gaffe.Proto.Literal> Values {
          get { return values_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other) {
          return Equals(other as Map);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(Map other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(KeyType, other.KeyType)) return false;
          if (!object.Equals(ValueType, other.ValueType)) return false;
          if(!keys_.Equals(other.keys_)) return false;
          if(!values_.Equals(other.values_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode() {
          int hash = 1;
          if (keyType_ != null) hash ^= KeyType.GetHashCode();
          if (valueType_ != null) hash ^= ValueType.GetHashCode();
          hash ^= keys_.GetHashCode();
          hash ^= values_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (keyType_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(KeyType);
          }
          if (valueType_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(ValueType);
          }
          keys_.WriteTo(output, _repeated_keys_codec);
          values_.WriteTo(output, _repeated_values_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (keyType_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(KeyType);
          }
          if (valueType_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(ValueType);
          }
          keys_.WriteTo(ref output, _repeated_keys_codec);
          values_.WriteTo(ref output, _repeated_values_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize() {
          int size = 0;
          if (keyType_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(KeyType);
          }
          if (valueType_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(ValueType);
          }
          size += keys_.CalculateSize(_repeated_keys_codec);
          size += values_.CalculateSize(_repeated_values_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(Map other) {
          if (other == null) {
            return;
          }
          if (other.keyType_ != null) {
            if (keyType_ == null) {
              KeyType = new global::Co.Gaffe.Proto.DataType();
            }
            KeyType.MergeFrom(other.KeyType);
          }
          if (other.valueType_ != null) {
            if (valueType_ == null) {
              ValueType = new global::Co.Gaffe.Proto.DataType();
            }
            ValueType.MergeFrom(other.ValueType);
          }
          keys_.Add(other.keys_);
          values_.Add(other.values_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (keyType_ == null) {
                  KeyType = new global::Co.Gaffe.Proto.DataType();
                }
                input.ReadMessage(KeyType);
                break;
              }
              case 18: {
                if (valueType_ == null) {
                  ValueType = new global::Co.Gaffe.Proto.DataType();
                }
                input.ReadMessage(ValueType);
                break;
              }
              case 26: {
                keys_.AddEntriesFrom(input, _repeated_keys_codec);
                break;
              }
              case 34: {
                values_.AddEntriesFrom(input, _repeated_values_codec);
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 10: {
                if (keyType_ == null) {
                  KeyType = new global::Co.Gaffe.Proto.DataType();
                }
                input.ReadMessage(KeyType);
                break;
              }
              case 18: {
                if (valueType_ == null) {
                  ValueType = new global::Co.Gaffe.Proto.DataType();
                }
                input.ReadMessage(ValueType);
                break;
              }
              case 26: {
                keys_.AddEntriesFrom(ref input, _repeated_keys_codec);
                break;
              }
              case 34: {
                values_.AddEntriesFrom(ref input, _repeated_values_codec);
                break;
              }
            }
          }
        }
        #endif

      }

      [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
      public sealed partial class Struct : pb::IMessage<Struct>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<Struct> _parser = new pb::MessageParser<Struct>(() => new Struct());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<Struct> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Co.Gaffe.Proto.Literal.Descriptor.NestedTypes[4]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Struct() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Struct(Struct other) : this() {
          structType_ = other.structType_ != null ? other.structType_.Clone() : null;
          elements_ = other.elements_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Struct Clone() {
          return new Struct(this);
        }

        /// <summary>Field number for the "struct_type" field.</summary>
        public const int StructTypeFieldNumber = 1;
        private global::Co.Gaffe.Proto.DataType structType_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Co.Gaffe.Proto.DataType StructType {
          get { return structType_; }
          set {
            structType_ = value;
          }
        }

        /// <summary>Field number for the "elements" field.</summary>
        public const int ElementsFieldNumber = 2;
        private static readonly pb::FieldCodec<global::Co.Gaffe.Proto.Literal> _repeated_elements_codec
            = pb::FieldCodec.ForMessage(18, global::Co.Gaffe.Proto.Literal.Parser);
        private readonly pbc::RepeatedField<global::Co.Gaffe.Proto.Literal> elements_ = new pbc::RepeatedField<global::Co.Gaffe.Proto.Literal>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public pbc::RepeatedField<global::Co.Gaffe.Proto.Literal> Elements {
          get { return elements_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other) {
          return Equals(other as Struct);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(Struct other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(StructType, other.StructType)) return false;
          if(!elements_.Equals(other.elements_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode() {
          int hash = 1;
          if (structType_ != null) hash ^= StructType.GetHashCode();
          hash ^= elements_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (structType_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(StructType);
          }
          elements_.WriteTo(output, _repeated_elements_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (structType_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(StructType);
          }
          elements_.WriteTo(ref output, _repeated_elements_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize() {
          int size = 0;
          if (structType_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(StructType);
          }
          size += elements_.CalculateSize(_repeated_elements_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(Struct other) {
          if (other == null) {
            return;
          }
          if (other.structType_ != null) {
            if (structType_ == null) {
              StructType = new global::Co.Gaffe.Proto.DataType();
            }
            StructType.MergeFrom(other.StructType);
          }
          elements_.Add(other.elements_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (structType_ == null) {
                  StructType = new global::Co.Gaffe.Proto.DataType();
                }
                input.ReadMessage(StructType);
                break;
              }
              case 18: {
                elements_.AddEntriesFrom(input, _repeated_elements_codec);
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 10: {
                if (structType_ == null) {
                  StructType = new global::Co.Gaffe.Proto.DataType();
                }
                input.ReadMessage(StructType);
                break;
              }
              case 18: {
                elements_.AddEntriesFrom(ref input, _repeated_elements_codec);
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
